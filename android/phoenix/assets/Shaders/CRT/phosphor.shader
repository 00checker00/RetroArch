<?xml version="1.0" encoding="UTF-8"?>
<!-- XML/GLSL shader autogenerated by cg2xml.py -->
<shader language="GLSL" style="GLES2">
    <vertex><![CDATA[
varying     float _frame_rotation;
varying     float _frame_direction;
varying     float _frame_count;
varying     vec2 _output_dummy_size;
varying     vec2 _tex_index;
varying     vec2 _coord_prev_prev;
varying     vec2 _coord_prev;
varying     vec2 _coord;
struct coords {
    vec2 _coord;
    vec2 _coord_prev;
    vec2 _coord_prev_prev;
    vec2 _tex_index;
};
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
vec4 _oPosition1;
uniform mat4 rubyMVPMatrix;
uniform input_dummy _IN1;
vec4 _r0003;
attribute vec4 rubyVertexCoord;
attribute vec4 rubyTexCoord;
varying vec4 TEX1;
varying vec4 TEX2;
varying vec4 TEX3;
varying vec4 TEX4;
 

         mat4 transpose_(mat4 matrix)
         {
            mat4 ret;
            for (int i = 0; i < 4; i++)
               for (int j = 0; j < 4; j++)
                  ret[i][j] = matrix[j][i];

            return ret;
         }
         
uniform mediump vec2 rubyOutputSize;
uniform mediump vec2 rubyTextureSize;
uniform mediump vec2 rubyInputSize;
void main()
{
    mat4 rubyMVPMatrix_ = transpose_(rubyMVPMatrix);
    coords _co;
    vec2 _one_x;
    _r0003.x = dot(rubyMVPMatrix_[0], rubyVertexCoord);
    _r0003.y = dot(rubyMVPMatrix_[1], rubyVertexCoord);
    _r0003.z = dot(rubyMVPMatrix_[2], rubyVertexCoord);
    _r0003.w = dot(rubyMVPMatrix_[3], rubyVertexCoord);
    _oPosition1 = _r0003;
    _one_x = vec2(1.00000000E+00/(3.00000000E+00*rubyTextureSize.x), 0.00000000E+00);
    _co._coord = rubyTexCoord.xy;
    _co._coord_prev = rubyTexCoord.xy - _one_x;
    _co._coord_prev_prev = rubyTexCoord.xy - 2.00000000E+00*_one_x;
    _co._tex_index = rubyTexCoord.xy*rubyTextureSize;
    gl_Position = _r0003;
    TEX1.xy = rubyTexCoord.xy;
    TEX2.xy = _co._coord_prev;
    TEX3.xy = _co._coord_prev_prev;
    TEX4.xy = _co._tex_index;
} 
 ]]></vertex>
    <fragment><![CDATA[
#ifdef GL_ES
precision mediump float;
#endif
varying     float _frame_rotation;
varying     float _frame_direction;
varying     float _frame_count;
varying     vec2 _output_dummy_size;
varying     vec2 _tex_index;
varying     vec2 _coord_prev_prev;
varying     vec2 _coord_prev;
varying     vec2 _coord;
struct coords {
    vec2 _coord;
    vec2 _coord_prev;
    vec2 _coord_prev_prev;
    vec2 _tex_index;
};
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
vec4 _ret_0;
vec3 _TMP3;
float _TMP10;
float _TMP9;
float _TMP8;
float _TMP7;
float _TMP6;
float _TMP5;
float _TMP4;
vec4 _TMP2;
vec4 _TMP1;
vec4 _TMP0;
uniform sampler2D rubyTexture;
float _c0014;
float _TMP21;
float _x0022;
vec3 _TMP31;
float _a0034;
float _c0034;
float _a0036;
vec3 _TMP41;
float _pixel0042;
float _a0044;
float _c0044;
float _a0046;
vec3 _TMP51;
float _pixel0052;
float _a0054;
float _c0054;
float _a0056;
varying vec4 TEX1;
varying vec4 TEX2;
varying vec4 TEX3;
varying vec4 TEX4;
 
uniform mediump vec2 rubyOutputSize;
uniform mediump vec2 rubyTextureSize;
uniform mediump vec2 rubyInputSize;
void main()
{
    float _pixel_x;
    vec3 _result;
    vec3 _TMP12;
    _TMP4 = abs(TEX4.y);
    _TMP5 = fract(_TMP4);
    _TMP6 = abs(1.00000000E+00);
    _c0014 = _TMP5*_TMP6;
    if (TEX4.y < 0.00000000E+00) { 
        _TMP7 = -_c0014;
    } else {
        _TMP7 = _c0014;
    } 
    _x0022 = -2.00000003E-01*_TMP7;
    _TMP21 = pow(2.71828198E+00, _x0022);
    _TMP0 = texture2D(rubyTexture, TEX1.xy);
    _TMP1 = texture2D(rubyTexture, TEX2.xy);
    _TMP2 = texture2D(rubyTexture, TEX3.xy);
    _pixel_x = 3.00000000E+00*TEX4.x;
    _a0034 = _pixel_x + 3.00000000E+00;
    _a0036 = _a0034/3.00000000E+00;
    _TMP4 = abs(_a0036);
    _TMP5 = fract(_TMP4);
    _TMP6 = abs(3.00000000E+00);
    _c0034 = _TMP5*_TMP6;
    if (_a0034 < 0.00000000E+00) { 
        _TMP7 = -_c0034;
    } else {
        _TMP7 = _c0034;
    } 
    if (_TMP7 >= 2.00000000E+00) { 
        _TMP31 = vec3(_TMP7 - 2.00000000E+00, 0.00000000E+00, 3.00000000E+00 - _TMP7);
    } else {
        if (_TMP7 >= 1.00000000E+00) { 
            _TMP31 = vec3(0.00000000E+00, 2.00000000E+00 - _TMP7, _TMP7 - 1.00000000E+00);
        } else {
            _TMP31 = vec3(1.00000000E+00 - _TMP7, _TMP7, 0.00000000E+00);
        } 
    } 
    _pixel0042 = _pixel_x - 1.00000000E+00;
    _a0044 = _pixel0042 + 3.00000000E+00;
    _a0046 = _a0044/3.00000000E+00;
    _TMP4 = abs(_a0046);
    _TMP5 = fract(_TMP4);
    _TMP6 = abs(3.00000000E+00);
    _c0044 = _TMP5*_TMP6;
    if (_a0044 < 0.00000000E+00) { 
        _TMP7 = -_c0044;
    } else {
        _TMP7 = _c0044;
    } 
    if (_TMP7 >= 2.00000000E+00) { 
        _TMP41 = vec3(_TMP7 - 2.00000000E+00, 0.00000000E+00, 3.00000000E+00 - _TMP7);
    } else {
        if (_TMP7 >= 1.00000000E+00) { 
            _TMP41 = vec3(0.00000000E+00, 2.00000000E+00 - _TMP7, _TMP7 - 1.00000000E+00);
        } else {
            _TMP41 = vec3(1.00000000E+00 - _TMP7, _TMP7, 0.00000000E+00);
        } 
    } 
    _pixel0052 = _pixel_x - 2.00000000E+00;
    _a0054 = _pixel0052 + 3.00000000E+00;
    _a0056 = _a0054/3.00000000E+00;
    _TMP4 = abs(_a0056);
    _TMP5 = fract(_TMP4);
    _TMP6 = abs(3.00000000E+00);
    _c0054 = _TMP5*_TMP6;
    if (_a0054 < 0.00000000E+00) { 
        _TMP7 = -_c0054;
    } else {
        _TMP7 = _c0054;
    } 
    if (_TMP7 >= 2.00000000E+00) { 
        _TMP51 = vec3(_TMP7 - 2.00000000E+00, 0.00000000E+00, 3.00000000E+00 - _TMP7);
    } else {
        if (_TMP7 >= 1.00000000E+00) { 
            _TMP51 = vec3(0.00000000E+00, 2.00000000E+00 - _TMP7, _TMP7 - 1.00000000E+00);
        } else {
            _TMP51 = vec3(1.00000000E+00 - _TMP7, _TMP7, 0.00000000E+00);
        } 
    } 
    _result = (8.00000012E-01*_TMP0.xyz)*_TMP31 + (6.00000024E-01*_TMP1.xyz)*_TMP41 + (3.00000012E-01*_TMP2.xyz)*_TMP51;
    _TMP8 = pow(_result.x, 1.39999998E+00);
    _TMP9 = pow(_result.y, 1.39999998E+00);
    _TMP10 = pow(_result.z, 1.39999998E+00);
    _TMP3 = vec3(_TMP8, _TMP9, _TMP10);
    _result = 2.29999995E+00*_TMP3;
    _TMP12 = _TMP21*_result;
    _ret_0 = vec4(_TMP12.x, _TMP12.y, _TMP12.z, 1.00000000E+00);
    gl_FragColor = _ret_0;
    return;
} 
 ]]></fragment>
</shader>
