<?xml version="1.0" encoding="UTF-8"?>
<!-- XML/GLSL shader autogenerated by cg2xml.py -->
<shader language="GLSL" style="GLES2">
    <vertex><![CDATA[
varying     vec4 _t6;
varying     vec4 _t5;
varying     vec4 _t4;
varying     vec4 _t3;
varying     vec4 _t2;
varying     vec4 _t1;
varying     vec2 _texCoord;
varying     vec4 _position1;
varying     float _frame_rotation;
varying     float _frame_direction;
varying     float _frame_count;
varying     vec2 _output_dummy_size;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct out_vertex {
    vec4 _position1;
    vec2 _texCoord;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
    vec4 _t5;
    vec4 _t6;
};
out_vertex _ret_0;
float _TMP1;
uniform mat4 rubyMVPMatrix;
uniform input_dummy _IN1;
vec4 _r0023;
attribute vec4 rubyVertexCoord;
attribute vec4 rubyTexCoord;
varying vec4 TEX0;
varying vec4 TEX1;
varying vec4 TEX2;
varying vec4 TEX3;
varying vec4 TEX4;
varying vec4 TEX5;
varying vec4 TEX6;
 

         mat4 transpose_(mat4 matrix)
         {
            mat4 ret;
            for (int i = 0; i < 4; i++)
               for (int j = 0; j < 4; j++)
                  ret[i][j] = matrix[j][i];

            return ret;
         }
         
uniform mediump vec2 rubyOutputSize;
uniform mediump vec2 rubyTextureSize;
uniform mediump vec2 rubyInputSize;
void main()
{
    mat4 rubyMVPMatrix_ = transpose_(rubyMVPMatrix);
    float _x;
    float _y;
    vec2 _dg1;
    vec2 _dg2;
    vec2 _sd1;
    vec2 _sd2;
    vec2 _ddx;
    vec2 _ddy;
    vec2 _TMP9;
    vec2 _TMP10;
    vec2 _TMP11;
    vec2 _TMP12;
    vec2 _TMP13;
    vec2 _TMP14;
    vec2 _TMP15;
    vec2 _TMP16;
    vec2 _TMP17;
    vec2 _TMP18;
    vec2 _TMP19;
    vec2 _TMP20;
    out_vertex _TMP21;
    _x = 5.00000000E-01*(1.00000000E+00/rubyTextureSize.x);
    _y = 5.00000000E-01*(1.00000000E+00/rubyTextureSize.y);
    _dg1 = vec2(_x, _y);
    _dg2 = vec2(-_x, _y);
    _sd1 = _dg1*5.00000000E-01;
    _sd2 = _dg2*5.00000000E-01;
    _ddx = vec2(_x, 0.00000000E+00);
    _ddy = vec2(0.00000000E+00, _y);
    _TMP1 = dot(vec4(float(rubyMVPMatrix_[0].x), float(rubyMVPMatrix_[0].y), float(rubyMVPMatrix_[0].z), float(rubyMVPMatrix_[0].w)), vec4(float(rubyVertexCoord.x), float(rubyVertexCoord.y), float(rubyVertexCoord.z), float(rubyVertexCoord.w)));
    _r0023.x = float(_TMP1);
    _TMP1 = dot(vec4(float(rubyMVPMatrix_[1].x), float(rubyMVPMatrix_[1].y), float(rubyMVPMatrix_[1].z), float(rubyMVPMatrix_[1].w)), vec4(float(rubyVertexCoord.x), float(rubyVertexCoord.y), float(rubyVertexCoord.z), float(rubyVertexCoord.w)));
    _r0023.y = float(_TMP1);
    _TMP1 = dot(vec4(float(rubyMVPMatrix_[2].x), float(rubyMVPMatrix_[2].y), float(rubyMVPMatrix_[2].z), float(rubyMVPMatrix_[2].w)), vec4(float(rubyVertexCoord.x), float(rubyVertexCoord.y), float(rubyVertexCoord.z), float(rubyVertexCoord.w)));
    _r0023.z = float(_TMP1);
    _TMP1 = dot(vec4(float(rubyMVPMatrix_[3].x), float(rubyMVPMatrix_[3].y), float(rubyMVPMatrix_[3].z), float(rubyMVPMatrix_[3].w)), vec4(float(rubyVertexCoord.x), float(rubyVertexCoord.y), float(rubyVertexCoord.z), float(rubyVertexCoord.w)));
    _r0023.w = float(_TMP1);
    _TMP19 = rubyTexCoord.xy - _sd1;
    _TMP20 = rubyTexCoord.xy - _ddy;
    _TMP21._t1 = vec4(_TMP19.x, _TMP19.y, _TMP20.x, _TMP20.y);
    _TMP17 = rubyTexCoord.xy - _sd2;
    _TMP18 = rubyTexCoord.xy + _ddx;
    _TMP21._t2 = vec4(_TMP17.x, _TMP17.y, _TMP18.x, _TMP18.y);
    _TMP15 = rubyTexCoord.xy + _sd1;
    _TMP16 = rubyTexCoord.xy + _ddy;
    _TMP21._t3 = vec4(_TMP15.x, _TMP15.y, _TMP16.x, _TMP16.y);
    _TMP13 = rubyTexCoord.xy + _sd2;
    _TMP14 = rubyTexCoord.xy - _ddx;
    _TMP21._t4 = vec4(_TMP13.x, _TMP13.y, _TMP14.x, _TMP14.y);
    _TMP11 = rubyTexCoord.xy - _dg1;
    _TMP12 = rubyTexCoord.xy - _dg2;
    _TMP21._t5 = vec4(_TMP11.x, _TMP11.y, _TMP12.x, _TMP12.y);
    _TMP9 = rubyTexCoord.xy + _dg1;
    _TMP10 = rubyTexCoord.xy + _dg2;
    _TMP21._t6 = vec4(_TMP9.x, _TMP9.y, _TMP10.x, _TMP10.y);
    _position1 = _r0023;
    _texCoord = rubyTexCoord.xy;
    _t1 = _TMP21._t1;
    _t2 = _TMP21._t2;
    _t3 = _TMP21._t3;
    _t4 = _TMP21._t4;
    _t5 = _TMP21._t5;
    _t6 = _TMP21._t6;
    gl_Position = vec4(float(_r0023.x), float(_r0023.y), float(_r0023.z), float(_r0023.w));
    TEX0.xy = rubyTexCoord.xy;
    TEX1 = _TMP21._t1;
    TEX2 = _TMP21._t2;
    TEX3 = _TMP21._t3;
    TEX4 = _TMP21._t4;
    TEX5 = _TMP21._t5;
    TEX6 = _TMP21._t6;
    return;
    TEX0.xy = _texCoord;
    TEX1 = _t1;
    TEX2 = _t2;
    TEX3 = _t3;
    TEX4 = _t4;
    TEX5 = _t5;
    TEX6 = _t6;
} 
 ]]></vertex>
    <fragment><![CDATA[
#ifdef GL_ES
precision mediump float;
#endif
varying     vec4 _t6;
varying     vec4 _t5;
varying     vec4 _t4;
varying     vec4 _t3;
varying     vec4 _t2;
varying     vec4 _t1;
varying     vec2 _texCoord;
varying     float _frame_rotation;
varying     float _frame_direction;
varying     float _frame_count;
varying     vec2 _output_dummy_size;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct out_vertex {
    vec2 _texCoord;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
    vec4 _t5;
    vec4 _t6;
};
vec4 _ret_0;
float _TMP43;
float _TMP41;
float _TMP42;
float _TMP38;
float _TMP37;
float _TMP40;
vec3 _TMP36;
vec3 _TMP35;
vec3 _TMP39;
float _TMP34;
float _TMP33;
vec3 _TMP32;
vec3 _TMP31;
float _TMP30;
float _TMP29;
vec3 _TMP28;
vec3 _TMP27;
float _TMP26;
float _TMP25;
vec3 _TMP24;
vec3 _TMP23;
float _TMP22;
float _TMP21;
vec3 _TMP20;
float _TMP19;
float _TMP18;
vec3 _TMP17;
vec3 _TMP16;
vec3 _TMP15;
vec3 _TMP14;
vec3 _TMP13;
vec4 _TMP12;
vec4 _TMP11;
vec4 _TMP10;
vec4 _TMP9;
vec4 _TMP8;
vec4 _TMP7;
vec4 _TMP6;
vec4 _TMP5;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec4 _TMP0;
uniform sampler2D rubyTexture;
vec2 _c0054;
vec2 _c0056;
vec2 _c0058;
vec2 _c0060;
vec2 _c0062;
vec2 _c0064;
vec2 _c0066;
vec2 _c0068;
vec2 _c0070;
vec2 _c0072;
vec2 _c0074;
vec2 _c0076;
vec2 _c0078;
vec3 _a0080;
vec3 _a0084;
vec3 _a0088;
vec3 _a0092;
vec3 _a0096;
vec3 _a0104;
vec3 _a0112;
vec3 _a0114;
vec3 _a0116;
vec3 _a0118;
vec3 _a0120;
vec3 _a0122;
vec3 _a0124;
vec3 _a0126;
vec3 _a0128;
vec3 _a0130;
vec3 _a0132;
vec3 _a0134;
vec3 _a0136;
vec3 _a0138;
vec3 _a0140;
vec3 _a0142;
float _TMP143;
float _x0144;
float _TMP149;
float _x0150;
float _TMP155;
float _x0156;
float _TMP161;
float _x0162;
varying vec4 TEX0;
varying vec4 TEX1;
varying vec4 TEX2;
varying vec4 TEX3;
varying vec4 TEX4;
varying vec4 TEX5;
varying vec4 TEX6;
 
uniform mediump vec2 rubyOutputSize;
uniform mediump vec2 rubyTextureSize;
uniform mediump vec2 rubyInputSize;
void main()
{
    vec3 _c;
    vec3 _i1;
    vec3 _i2;
    vec3 _i3;
    vec3 _i4;
    vec3 _o1;
    vec3 _o3;
    vec3 _o2;
    vec3 _o4;
    vec3 _s1;
    vec3 _s2;
    vec3 _s3;
    vec3 _s4;
    float _ko1;
    float _ko2;
    float _ko3;
    float _ko4;
    float _k1;
    float _k2;
    float _w1;
    float _w2;
    float _w3;
    float _w4;
    vec3 _TMP52;
    _c0054 = vec2(float(TEX0.x), float(TEX0.y));
    _TMP0 = texture2D(rubyTexture, _c0054);
    _c = vec3(float(_TMP0.x), float(_TMP0.y), float(_TMP0.z));
    _c0056 = vec2(float(TEX1.x), float(TEX1.y));
    _TMP1 = texture2D(rubyTexture, _c0056);
    _i1 = vec3(float(_TMP1.x), float(_TMP1.y), float(_TMP1.z));
    _c0058 = vec2(float(TEX2.x), float(TEX2.y));
    _TMP2 = texture2D(rubyTexture, _c0058);
    _i2 = vec3(float(_TMP2.x), float(_TMP2.y), float(_TMP2.z));
    _c0060 = vec2(float(TEX3.x), float(TEX3.y));
    _TMP3 = texture2D(rubyTexture, _c0060);
    _i3 = vec3(float(_TMP3.x), float(_TMP3.y), float(_TMP3.z));
    _c0062 = vec2(float(TEX4.x), float(TEX4.y));
    _TMP4 = texture2D(rubyTexture, _c0062);
    _i4 = vec3(float(_TMP4.x), float(_TMP4.y), float(_TMP4.z));
    _c0064 = vec2(float(TEX5.x), float(TEX5.y));
    _TMP5 = texture2D(rubyTexture, _c0064);
    _o1 = vec3(float(_TMP5.x), float(_TMP5.y), float(_TMP5.z));
    _c0066 = vec2(float(TEX6.x), float(TEX6.y));
    _TMP6 = texture2D(rubyTexture, _c0066);
    _o3 = vec3(float(_TMP6.x), float(_TMP6.y), float(_TMP6.z));
    _c0068 = vec2(float(TEX5.z), float(TEX5.w));
    _TMP7 = texture2D(rubyTexture, _c0068);
    _o2 = vec3(float(_TMP7.x), float(_TMP7.y), float(_TMP7.z));
    _c0070 = vec2(float(TEX6.z), float(TEX6.w));
    _TMP8 = texture2D(rubyTexture, _c0070);
    _o4 = vec3(float(_TMP8.x), float(_TMP8.y), float(_TMP8.z));
    _c0072 = vec2(float(TEX1.z), float(TEX1.w));
    _TMP9 = texture2D(rubyTexture, _c0072);
    _s1 = vec3(float(_TMP9.x), float(_TMP9.y), float(_TMP9.z));
    _c0074 = vec2(float(TEX2.z), float(TEX2.w));
    _TMP10 = texture2D(rubyTexture, _c0074);
    _s2 = vec3(float(_TMP10.x), float(_TMP10.y), float(_TMP10.z));
    _c0076 = vec2(float(TEX3.z), float(TEX3.w));
    _TMP11 = texture2D(rubyTexture, _c0076);
    _s3 = vec3(float(_TMP11.x), float(_TMP11.y), float(_TMP11.z));
    _c0078 = vec2(float(TEX4.z), float(TEX4.w));
    _TMP12 = texture2D(rubyTexture, _c0078);
    _s4 = vec3(float(_TMP12.x), float(_TMP12.y), float(_TMP12.z));
    _a0080 = _o1 - _c;
    _TMP39 = abs(vec3(float(_a0080.x), float(_a0080.y), float(_a0080.z)));
    _TMP13 = vec3(float(_TMP39.x), float(_TMP39.y), float(_TMP39.z));
    _TMP40 = dot(vec3(float(_TMP13.x), float(_TMP13.y), float(_TMP13.z)), vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _ko1 = float(_TMP40);
    _a0084 = _o2 - _c;
    _TMP39 = abs(vec3(float(_a0084.x), float(_a0084.y), float(_a0084.z)));
    _TMP14 = vec3(float(_TMP39.x), float(_TMP39.y), float(_TMP39.z));
    _TMP40 = dot(vec3(float(_TMP14.x), float(_TMP14.y), float(_TMP14.z)), vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _ko2 = float(_TMP40);
    _a0088 = _o3 - _c;
    _TMP39 = abs(vec3(float(_a0088.x), float(_a0088.y), float(_a0088.z)));
    _TMP15 = vec3(float(_TMP39.x), float(_TMP39.y), float(_TMP39.z));
    _TMP40 = dot(vec3(float(_TMP15.x), float(_TMP15.y), float(_TMP15.z)), vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _ko3 = float(_TMP40);
    _a0092 = _o4 - _c;
    _TMP39 = abs(vec3(float(_a0092.x), float(_a0092.y), float(_a0092.z)));
    _TMP16 = vec3(float(_TMP39.x), float(_TMP39.y), float(_TMP39.z));
    _TMP40 = dot(vec3(float(_TMP16.x), float(_TMP16.y), float(_TMP16.z)), vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _ko4 = float(_TMP40);
    _a0096 = _i1 - _i3;
    _TMP39 = abs(vec3(float(_a0096.x), float(_a0096.y), float(_a0096.z)));
    _TMP17 = vec3(float(_TMP39.x), float(_TMP39.y), float(_TMP39.z));
    _TMP40 = dot(vec3(float(_TMP17.x), float(_TMP17.y), float(_TMP17.z)), vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _TMP18 = float(_TMP40);
    _TMP41 = max(float(_ko1), float(_ko3));
    _TMP19 = float(_TMP41);
    _TMP42 = min(float(_TMP18), float(_TMP19));
    _k1 = float(_TMP42);
    _a0104 = _i2 - _i4;
    _TMP39 = abs(vec3(float(_a0104.x), float(_a0104.y), float(_a0104.z)));
    _TMP20 = vec3(float(_TMP39.x), float(_TMP39.y), float(_TMP39.z));
    _TMP40 = dot(vec3(float(_TMP20.x), float(_TMP20.y), float(_TMP20.z)), vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _TMP21 = float(_TMP40);
    _TMP41 = max(float(_ko2), float(_ko4));
    _TMP22 = float(_TMP41);
    _TMP42 = min(float(_TMP21), float(_TMP22));
    _k2 = float(_TMP42);
    _w1 = _k2;
    if (_ko3 < _ko1) { 
        _w1 = _k2*(_ko3/_ko1);
    } 
    _w2 = _k1;
    if (_ko4 < _ko2) { 
        _w2 = _k1*(_ko4/_ko2);
    } 
    _w3 = _k2;
    if (_ko1 < _ko3) { 
        _w3 = _k2*(_ko1/_ko3);
    } 
    _w4 = _k1;
    if (_ko2 < _ko4) { 
        _w4 = _k1*(_ko2/_ko4);
    } 
    _c = (_w1*_o1 + _w2*_o2 + _w3*_o3 + _w4*_o4 + 1.00040436E-03*_c)/(_w1 + _w2 + _w3 + _w4 + 1.00040436E-03);
    _a0112 = _i1 - _c;
    _TMP39 = abs(vec3(float(_a0112.x), float(_a0112.y), float(_a0112.z)));
    _TMP23 = vec3(float(_TMP39.x), float(_TMP39.y), float(_TMP39.z));
    _a0114 = _i3 - _c;
    _TMP39 = abs(vec3(float(_a0114.x), float(_a0114.y), float(_a0114.z)));
    _TMP24 = vec3(float(_TMP39.x), float(_TMP39.y), float(_TMP39.z));
    _a0116 = _TMP23 + _TMP24;
    _TMP40 = dot(vec3(float(_a0116.x), float(_a0116.y), float(_a0116.z)), vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _TMP25 = float(_TMP40);
    _a0118 = _i1 + _i3;
    _TMP40 = dot(vec3(float(_a0118.x), float(_a0118.y), float(_a0118.z)), vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _TMP26 = float(_TMP40);
    _w1 = (-1.09960938E+00*_TMP25)/(1.25000000E-01*_TMP26 + 3.30078125E-01);
    _a0120 = _i2 - _c;
    _TMP39 = abs(vec3(float(_a0120.x), float(_a0120.y), float(_a0120.z)));
    _TMP27 = vec3(float(_TMP39.x), float(_TMP39.y), float(_TMP39.z));
    _a0122 = _i4 - _c;
    _TMP39 = abs(vec3(float(_a0122.x), float(_a0122.y), float(_a0122.z)));
    _TMP28 = vec3(float(_TMP39.x), float(_TMP39.y), float(_TMP39.z));
    _a0124 = _TMP27 + _TMP28;
    _TMP40 = dot(vec3(float(_a0124.x), float(_a0124.y), float(_a0124.z)), vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _TMP29 = float(_TMP40);
    _a0126 = _i2 + _i4;
    _TMP40 = dot(vec3(float(_a0126.x), float(_a0126.y), float(_a0126.z)), vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _TMP30 = float(_TMP40);
    _w2 = (-1.09960938E+00*_TMP29)/(1.25000000E-01*_TMP30 + 3.30078125E-01);
    _a0128 = _s1 - _c;
    _TMP39 = abs(vec3(float(_a0128.x), float(_a0128.y), float(_a0128.z)));
    _TMP31 = vec3(float(_TMP39.x), float(_TMP39.y), float(_TMP39.z));
    _a0130 = _s3 - _c;
    _TMP39 = abs(vec3(float(_a0130.x), float(_a0130.y), float(_a0130.z)));
    _TMP32 = vec3(float(_TMP39.x), float(_TMP39.y), float(_TMP39.z));
    _a0132 = _TMP31 + _TMP32;
    _TMP40 = dot(vec3(float(_a0132.x), float(_a0132.y), float(_a0132.z)), vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _TMP33 = float(_TMP40);
    _a0134 = _s1 + _s3;
    _TMP40 = dot(vec3(float(_a0134.x), float(_a0134.y), float(_a0134.z)), vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _TMP34 = float(_TMP40);
    _w3 = (-1.09960938E+00*_TMP33)/(1.25000000E-01*_TMP34 + 3.30078125E-01);
    _a0136 = _s2 - _c;
    _TMP39 = abs(vec3(float(_a0136.x), float(_a0136.y), float(_a0136.z)));
    _TMP35 = vec3(float(_TMP39.x), float(_TMP39.y), float(_TMP39.z));
    _a0138 = _s4 - _c;
    _TMP39 = abs(vec3(float(_a0138.x), float(_a0138.y), float(_a0138.z)));
    _TMP36 = vec3(float(_TMP39.x), float(_TMP39.y), float(_TMP39.z));
    _a0140 = _TMP35 + _TMP36;
    _TMP40 = dot(vec3(float(_a0140.x), float(_a0140.y), float(_a0140.z)), vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _TMP37 = float(_TMP40);
    _a0142 = _s2 + _s4;
    _TMP40 = dot(vec3(float(_a0142.x), float(_a0142.y), float(_a0142.z)), vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _TMP38 = float(_TMP40);
    _w4 = (-1.09960938E+00*_TMP37)/(1.25000000E-01*_TMP38 + 3.30078125E-01);
    _x0144 = _w1 + 1.00000000E+00;
    _TMP42 = min(7.50000000E-01, float(_x0144));
    _TMP43 = float(_TMP42);
    _TMP41 = max(2.99987793E-02, float(_TMP43));
    _TMP143 = float(_TMP41);
    _x0150 = _w2 + 1.00000000E+00;
    _TMP42 = min(7.50000000E-01, float(_x0150));
    _TMP43 = float(_TMP42);
    _TMP41 = max(2.99987793E-02, float(_TMP43));
    _TMP149 = float(_TMP41);
    _x0156 = _w3 + 1.00000000E+00;
    _TMP42 = min(7.50000000E-01, float(_x0156));
    _TMP43 = float(_TMP42);
    _TMP41 = max(2.99987793E-02, float(_TMP43));
    _TMP155 = float(_TMP41);
    _x0162 = _w4 + 1.00000000E+00;
    _TMP42 = min(7.50000000E-01, float(_x0162));
    _TMP43 = float(_TMP42);
    _TMP41 = max(2.99987793E-02, float(_TMP43));
    _TMP161 = float(_TMP41);
    _TMP52 = (_TMP143*(_i1 + _i3) + _TMP149*(_i2 + _i4) + _TMP155*(_s1 + _s3) + _TMP161*(_s2 + _s4) + _c)/(2.00000000E+00*(_TMP143 + _TMP149 + _TMP155 + _TMP161) + 1.00000000E+00);
    _ret_0 = vec4(_TMP52.x, _TMP52.y, _TMP52.z, 1.00000000E+00);
    gl_FragColor = vec4(float(_ret_0.x), float(_ret_0.y), float(_ret_0.z), float(_ret_0.w));
    return;
} 
 ]]></fragment>
</shader>
