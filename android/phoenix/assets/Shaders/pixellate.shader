<?xml version="1.0" encoding="UTF-8"?>
<!-- XML/GLSL shader autogenerated by cg2xml.py -->
<shader language="GLSL" style="GLES2">
    <vertex><![CDATA[
varying     float _frame_rotation;
varying     float _frame_direction;
varying     float _frame_count;
varying     vec2 _output_dummy_size;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
vec4 _oPosition1;
uniform mat4 rubyMVPMatrix;
vec4 _r0002;
attribute vec4 rubyVertexCoord;
attribute vec4 rubyTexCoord;
varying vec4 TEX0;
 

         mat4 transpose_(mat4 matrix)
         {
            mat4 ret;
            for (int i = 0; i < 4; i++)
               for (int j = 0; j < 4; j++)
                  ret[i][j] = matrix[j][i];

            return ret;
         }
         
uniform mediump vec2 rubyOutputSize;
uniform mediump vec2 rubyTextureSize;
uniform mediump vec2 rubyInputSize;
void main()
{
    mat4 rubyMVPMatrix_ = transpose_(rubyMVPMatrix);
    vec2 _oTex;
    _r0002.x = dot(rubyMVPMatrix_[0], rubyVertexCoord);
    _r0002.y = dot(rubyMVPMatrix_[1], rubyVertexCoord);
    _r0002.z = dot(rubyMVPMatrix_[2], rubyVertexCoord);
    _r0002.w = dot(rubyMVPMatrix_[3], rubyVertexCoord);
    _oPosition1 = _r0002;
    _oTex = rubyTexCoord.xy;
    gl_Position = _r0002;
    TEX0.xy = rubyTexCoord.xy;
} 
 ]]></vertex>
    <fragment><![CDATA[
#ifdef GL_ES
precision mediump float;
#endif
varying     float _frame_rotation;
varying     float _frame_direction;
varying     float _frame_count;
varying     vec2 _output_dummy_size;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
vec4 _ret_0;
vec2 _TMP9;
vec4 _TMP7;
vec2 _TMP6;
vec4 _TMP5;
vec2 _TMP4;
vec4 _TMP3;
vec2 _TMP2;
vec4 _TMP1;
vec2 _TMP0;
uniform sampler2D rubyTexture;
uniform input_dummy _IN1;
vec2 _x0014;
vec2 _c0016;
vec2 _x0018;
vec2 _c0020;
vec2 _x0022;
vec2 _c0024;
vec2 _x0026;
vec2 _c0028;
vec2 _TMP29;
vec2 _a0030;
vec2 _x0032;
vec2 _TMP33;
vec2 _b0034;
vec2 _x0034;
vec2 _a0034;
varying vec4 TEX0;
 
uniform mediump vec2 rubyOutputSize;
uniform mediump vec2 rubyTextureSize;
uniform mediump vec2 rubyInputSize;
void main()
{
    vec2 _texelSize;
    vec2 _range;
    float _left;
    float _top;
    float _right;
    float _bottom;
    float _totalArea;
    vec3 _averageColor;
    _texelSize = 1.00000000E+00/rubyTextureSize;
    _range = 5.00000000E-01/rubyOutputSize;
    _left = TEX0.x - _range.x;
    _top = TEX0.y + _range.y;
    _right = TEX0.x + _range.x;
    _bottom = TEX0.y - _range.y;
    _x0014 = vec2(_left, _top)/_texelSize;
    _TMP0 = floor(_x0014);
    _c0016 = (_TMP0 + 5.00000000E-01)*_texelSize;
    _TMP1 = texture2D(rubyTexture, _c0016);
    _x0018 = vec2(_right, _bottom)/_texelSize;
    _TMP2 = floor(_x0018);
    _c0020 = (_TMP2 + 5.00000000E-01)*_texelSize;
    _TMP3 = texture2D(rubyTexture, _c0020);
    _x0022 = vec2(_left, _bottom)/_texelSize;
    _TMP4 = floor(_x0022);
    _c0024 = (_TMP4 + 5.00000000E-01)*_texelSize;
    _TMP5 = texture2D(rubyTexture, _c0024);
    _x0026 = vec2(_right, _top)/_texelSize;
    _TMP6 = floor(_x0026);
    _c0028 = (_TMP6 + 5.00000000E-01)*_texelSize;
    _TMP7 = texture2D(rubyTexture, _c0028);
    _a0030 = TEX0.xy/_texelSize;
    _x0032 = _a0030 + 5.00000000E-01;
    _TMP29 = floor(_x0032);
    _x0034 = _TMP29*_texelSize;
    _a0034 = vec2(_left, _bottom);
    _b0034 = vec2(_right, _top);
    _TMP9 = min(_b0034, _x0034);
    _TMP33 = max(_a0034, _TMP9);
    _totalArea = 4.00000000E+00*_range.x*_range.y;
    _averageColor = (((_TMP33.x - _left)*(_top - _TMP33.y))/_totalArea)*_TMP1.xyz;
    _averageColor = _averageColor + (((_right - _TMP33.x)*(_TMP33.y - _bottom))/_totalArea)*_TMP3.xyz;
    _averageColor = _averageColor + (((_TMP33.x - _left)*(_TMP33.y - _bottom))/_totalArea)*_TMP5.xyz;
    _averageColor = _averageColor + (((_right - _TMP33.x)*(_top - _TMP33.y))/_totalArea)*_TMP7.xyz;
    _ret_0 = vec4(_averageColor.x, _averageColor.y, _averageColor.z, 1.00000000E+00);
    gl_FragColor = _ret_0;
    return;
} 
 ]]></fragment>
</shader>
