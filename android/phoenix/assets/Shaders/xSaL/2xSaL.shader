<?xml version="1.0" encoding="UTF-8"?>
<!-- XML/GLSL shader autogenerated by cg2xml.py -->
<shader language="GLSL" style="GLES2">
    <vertex><![CDATA[
varying     vec2 _DR;
varying     vec2 _DL;
varying     vec2 _UR;
varying     vec2 _UL;
varying     float _frame_rotation;
varying     float _frame_direction;
varying     float _frame_count;
varying     vec2 _output_dummy_size;
varying     vec4 _color;
struct output_dummy {
    vec4 _color;
};
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct deltas {
    vec2 _UL;
    vec2 _UR;
    vec2 _DL;
    vec2 _DR;
};
vec4 _oPosition1;
uniform mat4 rubyMVPMatrix;
vec4 _r0002;
attribute vec4 rubyVertexCoord;
attribute vec4 rubyTexCoord;
varying vec4 TEX0;
 

         mat4 transpose_(mat4 matrix)
         {
            mat4 ret;
            for (int i = 0; i < 4; i++)
               for (int j = 0; j < 4; j++)
                  ret[i][j] = matrix[j][i];

            return ret;
         }
         
uniform mediump vec2 rubyOutputSize;
uniform mediump vec2 rubyTextureSize;
uniform mediump vec2 rubyInputSize;
void main()
{
    mat4 rubyMVPMatrix_ = transpose_(rubyMVPMatrix);
    vec2 _otexCoord;
    _r0002.x = dot(rubyMVPMatrix_[0], rubyVertexCoord);
    _r0002.y = dot(rubyMVPMatrix_[1], rubyVertexCoord);
    _r0002.z = dot(rubyMVPMatrix_[2], rubyVertexCoord);
    _r0002.w = dot(rubyMVPMatrix_[3], rubyVertexCoord);
    _oPosition1 = _r0002;
    _otexCoord = rubyTexCoord.xy;
    gl_Position = _r0002;
    TEX0.xy = rubyTexCoord.xy;
} 
 ]]></vertex>
    <fragment><![CDATA[
#ifdef GL_ES
precision mediump float;
#endif
varying     vec2 _DR;
varying     vec2 _DL;
varying     vec2 _UR;
varying     vec2 _UL;
varying     float _frame_rotation;
varying     float _frame_direction;
varying     float _frame_count;
varying     vec2 _output_dummy_size;
varying     vec4 _color;
struct output_dummy {
    vec4 _color;
};
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct deltas {
    vec2 _UL;
    vec2 _UR;
    vec2 _DL;
    vec2 _DR;
};
float _TMP9;
vec3 _TMP8;
float _TMP7;
vec3 _TMP6;
vec4 _TMP5;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
float _TMP1;
float _TMP0;
uniform input_dummy _IN1;
uniform sampler2D rubyTexture;
vec3 _a0023;
vec3 _a0027;
varying vec4 TEX0;
 
uniform mediump vec2 rubyOutputSize;
uniform mediump vec2 rubyTextureSize;
uniform mediump vec2 rubyInputSize;
void main()
{
    float _dx;
    float _dy;
    float _m1;
    float _m2;
    output_dummy _OUT;
    vec3 _TMP12;
    deltas _TMP13;
    _TMP0 = 1.00000000E+00/rubyTextureSize.x;
    _dx = _TMP0*2.50000000E-01;
    _TMP1 = 1.00000000E+00/rubyTextureSize.y;
    _dy = _TMP1*2.50000000E-01;
    _TMP13._UL = TEX0.xy + vec2(-_dx, -_dy);
    _TMP13._UR = TEX0.xy + vec2(_dx, -_dy);
    _TMP13._DL = TEX0.xy + vec2(-_dx, _dy);
    _TMP13._DR = TEX0.xy + vec2(_dx, _dy);
    _TMP2 = texture2D(rubyTexture, _TMP13._UL);
    _TMP3 = texture2D(rubyTexture, _TMP13._UR);
    _TMP4 = texture2D(rubyTexture, _TMP13._DL);
    _TMP5 = texture2D(rubyTexture, _TMP13._DR);
    _a0023 = _TMP2.xyz - _TMP5.xyz;
    _TMP6 = abs(_a0023);
    _TMP7 = dot(_TMP6, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _m1 = _TMP7 + 1.00000005E-03;
    _a0027 = _TMP4.xyz - _TMP3.xyz;
    _TMP8 = abs(_a0027);
    _TMP9 = dot(_TMP8, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _m2 = _TMP9 + 1.00000005E-03;
    _TMP12 = (_m1*(_TMP4.xyz + _TMP3.xyz) + _m2*(_TMP5.xyz + _TMP2.xyz))/(2.00000000E+00*(_m1 + _m2));
    _OUT._color = vec4(_TMP12.x, _TMP12.y, _TMP12.z, 1.00000000E+00);
    gl_FragColor = _OUT._color;
    return;
} 
 ]]></fragment>
</shader>
