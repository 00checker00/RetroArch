<?xml version="1.0" encoding="UTF-8"?>
<!-- XML/GLSL shader autogenerated by cg2xml.py -->
<shader language="GLSL" style="GLES2">
    <vertex><![CDATA[
varying     vec2 _tex_300;
varying     vec2 _tex_240;
varying     vec2 _tex_180;
varying     vec2 _tex_120;
varying     vec2 _tex_60;
varying     vec2 _tex_0;
varying     vec2 _tex_direct;
varying     float _frame_rotation;
varying     float _frame_direction;
varying     float frame_count;
varying     vec2 _output_dummy_size;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct vert_out {
    vec2 _tex_direct;
    vec2 _tex_0;
    vec2 _tex_60;
    vec2 _tex_120;
    vec2 _tex_180;
    vec2 _tex_240;
    vec2 _tex_300;
};
vec4 _oPosition1;
float _TMP5;
float _TMP4;
float _TMP3;
float _TMP2;
float _TMP1;
input_dummy _TMP13;
uniform mat4 rubyMVPMatrix;
uniform input_dummy _IN1;
vec4 _r0016;
float _a0026;
vec2 _r0036;
vec2 _r0042;
vec2 _r0048;
vec2 _r0054;
vec2 _r0060;
vec2 _r0066;
attribute vec4 rubyVertexCoord;
attribute vec4 rubyTexCoord;
varying vec4 TEX1;
varying vec4 TEX2;
varying vec4 TEX3;
varying vec4 TEX4;
varying vec4 TEX5;
varying vec4 TEX6;
varying vec4 TEX7;
 

         mat4 transpose_(mat4 matrix)
         {
            mat4 ret;
            for (int i = 0; i < 4; i++)
               for (int j = 0; j < 4; j++)
                  ret[i][j] = matrix[j][i];

            return ret;
         }
         
uniform mediump vec2 rubyOutputSize;
uniform mediump vec2 rubyTextureSize;
uniform mediump vec2 rubyInputSize;
void main()
{
    mat4 rubyMVPMatrix_ = transpose_(rubyMVPMatrix);
    vert_out _verts;
    vec2 _one;
    float _scale;
    vec2 _TMP14[2];
    _r0016.x = dot(rubyMVPMatrix_[0], rubyVertexCoord);
    _r0016.y = dot(rubyMVPMatrix_[1], rubyVertexCoord);
    _r0016.z = dot(rubyMVPMatrix_[2], rubyVertexCoord);
    _r0016.w = dot(rubyMVPMatrix_[3], rubyVertexCoord);
    _oPosition1 = _r0016;
    _one = 1.00000000E+00/rubyTextureSize;
    frame_count = _IN1.frame_count/2.00000000E+01;
    _a0026 = 5.00000000E-01*frame_count;
    _TMP1 = sin(_a0026);
    _scale = 1.00000000E+00 + 2.00000003E-01*_TMP1;
    _TMP2 = cos(frame_count);
    _TMP3 = sin(frame_count);
    _TMP4 = sin(frame_count);
    _TMP5 = cos(frame_count);
    _TMP14[0] = _scale*vec2(_TMP2, _TMP3);
    _TMP14[1] = _scale*vec2(-_TMP4, _TMP5);
    _verts._tex_direct = rubyTexCoord.xy;
    _r0036.x = dot(_TMP14[0], vec2( 1.00000000E+00, 0.00000000E+00));
    _r0036.y = dot(_TMP14[1], vec2( 1.00000000E+00, 0.00000000E+00));
    _verts._tex_0 = rubyTexCoord.xy + _one*_r0036;
    _r0042.x = dot(_TMP14[0], vec2( 5.00000000E-01, 6.99999988E-01));
    _r0042.y = dot(_TMP14[1], vec2( 5.00000000E-01, 6.99999988E-01));
    _verts._tex_60 = rubyTexCoord.xy + _one*_r0042;
    _r0048.x = dot(_TMP14[0], vec2( -5.00000000E-01, 6.99999988E-01));
    _r0048.y = dot(_TMP14[1], vec2( -5.00000000E-01, 6.99999988E-01));
    _verts._tex_120 = rubyTexCoord.xy + _one*_r0048;
    _r0054.x = dot(_TMP14[0], vec2( -1.00000000E+00, 0.00000000E+00));
    _r0054.y = dot(_TMP14[1], vec2( -1.00000000E+00, 0.00000000E+00));
    _verts._tex_180 = rubyTexCoord.xy + _one*_r0054;
    _r0060.x = dot(_TMP14[0], vec2( -5.00000000E-01, -6.99999988E-01));
    _r0060.y = dot(_TMP14[1], vec2( -5.00000000E-01, -6.99999988E-01));
    _verts._tex_240 = rubyTexCoord.xy + _one*_r0060;
    _r0066.x = dot(_TMP14[0], vec2( 5.00000000E-01, -6.99999988E-01));
    _r0066.y = dot(_TMP14[1], vec2( 5.00000000E-01, -6.99999988E-01));
    _verts._tex_300 = rubyTexCoord.xy + _one*_r0066;
    gl_Position = _r0016;
    TEX1.xy = rubyTexCoord.xy;
    TEX2.xy = _verts._tex_0;
    TEX3.xy = _verts._tex_60;
    TEX4.xy = _verts._tex_120;
    TEX5.xy = _verts._tex_180;
    TEX6.xy = _verts._tex_240;
    TEX7.xy = _verts._tex_300;
} 
 ]]></vertex>
    <fragment><![CDATA[
#ifdef GL_ES
precision mediump float;
#endif
varying     vec2 _tex_300;
varying     vec2 _tex_240;
varying     vec2 _tex_180;
varying     vec2 _tex_120;
varying     vec2 _tex_60;
varying     vec2 _tex_0;
varying     vec2 _tex_direct;
varying     float _frame_rotation;
varying     float _frame_direction;
varying     float _frame_count;
varying     vec2 _output_dummy_size;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct vert_out {
    vec2 _tex_direct;
    vec2 _tex_0;
    vec2 _tex_60;
    vec2 _tex_120;
    vec2 _tex_180;
    vec2 _tex_240;
    vec2 _tex_300;
};
vec4 _ret_0;
float _TMP12;
float _TMP11;
float _TMP10;
float _TMP9;
vec4 _TMP7;
vec4 _TMP6;
vec4 _TMP5;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec4 _TMP0;
uniform sampler2D rubyTexture;
vec4 _TMP48;
vec4 _x0049;
varying vec4 TEX1;
varying vec4 TEX2;
varying vec4 TEX3;
varying vec4 TEX4;
varying vec4 TEX5;
varying vec4 TEX6;
varying vec4 TEX7;
 
uniform mediump vec2 rubyOutputSize;
uniform mediump vec2 rubyTextureSize;
uniform mediump vec2 rubyInputSize;
void main()
{
    vec4 _tex_mid;
    vec4 _tex0;
    vec4 _tex60;
    vec4 _tex120;
    vec4 _tex180;
    vec4 _tex240;
    vec4 _tex300;
    vec4 _minimum;
    vec4 _maximum;
    vec4 _diff;
    _tex_mid = texture2D(rubyTexture, TEX1.xy);
    _tex0 = texture2D(rubyTexture, TEX2.xy);
    _tex60 = texture2D(rubyTexture, TEX3.xy);
    _tex120 = texture2D(rubyTexture, TEX4.xy);
    _tex180 = texture2D(rubyTexture, TEX5.xy);
    _tex240 = texture2D(rubyTexture, TEX6.xy);
    _tex300 = texture2D(rubyTexture, TEX7.xy);
    _TMP0 = min(_tex0, _tex60);
    _TMP1 = min(_tex120, _tex180);
    _TMP2 = min(_TMP0, _TMP1);
    _TMP3 = min(_tex240, _tex300);
    _minimum = min(_TMP2, _TMP3);
    _TMP4 = max(_tex0, _tex60);
    _TMP5 = max(_tex120, _tex180);
    _TMP6 = max(_TMP4, _TMP5);
    _TMP7 = max(_tex240, _tex300);
    _maximum = max(_TMP6, _TMP7);
    _x0049 = -(_maximum - _minimum);
    _TMP9 = pow(2.71828198E+00, _x0049.x);
    _TMP10 = pow(2.71828198E+00, _x0049.y);
    _TMP11 = pow(2.71828198E+00, _x0049.z);
    _TMP12 = pow(2.71828198E+00, _x0049.w);
    _TMP48 = vec4(_TMP9, _TMP10, _TMP11, _TMP12);
    _diff = 1.00000000E+00 - _TMP48;
    _ret_0 = _tex_mid + 8.99999976E-01*(_diff - _tex_mid);
    gl_FragColor = _ret_0;
    return;
} 
 ]]></fragment>
</shader>
