<?xml version="1.0" encoding="UTF-8"?>
<!-- XML/GLSL shader autogenerated by cg2xml.py -->
<shader language="GLSL" style="GLES2">
    <vertex><![CDATA[
varying     vec4 _color1;
struct output_dummy {
    vec4 _color1;
};
vec4 _oPosition1;
uniform mat4 rubyMVPMatrix;
vec4 _r0005;
attribute vec4 rubyVertexCoord;
attribute vec4 COLOR;
attribute vec4 rubyTexCoord;
varying vec4 COL0;
varying vec4 TEX0;
 

         mat4 transpose_(mat4 matrix)
         {
            mat4 ret;
            for (int i = 0; i < 4; i++)
               for (int j = 0; j < 4; j++)
                  ret[i][j] = matrix[j][i];

            return ret;
         }
         
uniform mediump vec2 rubyOutputSize;
uniform mediump vec2 rubyTextureSize;
uniform mediump vec2 rubyInputSize;
void main()
{
    mat4 rubyMVPMatrix_ = transpose_(rubyMVPMatrix);
    vec4 _oColor;
    vec2 _otexCoord;
    _r0005.x = dot(rubyMVPMatrix_[0], rubyVertexCoord);
    _r0005.y = dot(rubyMVPMatrix_[1], rubyVertexCoord);
    _r0005.z = dot(rubyMVPMatrix_[2], rubyVertexCoord);
    _r0005.w = dot(rubyMVPMatrix_[3], rubyVertexCoord);
    _oPosition1 = _r0005;
    _oColor = COLOR;
    _otexCoord = rubyTexCoord.xy;
    gl_Position = _r0005;
    COL0 = COLOR;
    TEX0.xy = rubyTexCoord.xy;
} 
 ]]></vertex>
    <fragment><![CDATA[
#ifdef GL_ES
precision mediump float;
#endif
varying     vec4 _color;
struct output_dummy {
    vec4 _color;
};
vec4 _TMP2;
vec4 _TMP1;
uniform sampler2D rubyTexture;
vec2 _c0009;
vec3 _TMP10;
varying vec4 TEX0;
uniform float _Luminance;
uniform vec2 _PixelOffsets[13];
 
uniform mediump vec2 rubyOutputSize;
uniform mediump vec2 rubyTextureSize;
uniform mediump vec2 rubyInputSize;
void main()
{
    vec3 _pixel;
    vec3 _Color;
    output_dummy _OUT;
    _c0009 = TEX0.xy + _PixelOffsets[0]*5.00000000E+00;
    _TMP1 = texture2D(rubyTexture, _c0009);
    _pixel = (_TMP1 + 3.00000012E-01).xyz;
    _pixel = _pixel*(1.80000007E-01/(_Luminance + 1.00000005E-03));
    _pixel = _pixel*(1.00000000E+00 + _pixel/6.40000045E-01);
    _pixel = _pixel - 5.00000000E+00;
    _TMP10 = max(_pixel, vec3( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00));
    _pixel = _TMP10/(1.00000000E+01 + _TMP10);
    _Color = _pixel*2.21600011E-03;
    _c0009 = TEX0.xy + _PixelOffsets[1]*5.00000000E+00;
    _TMP1 = texture2D(rubyTexture, _c0009);
    _pixel = (_TMP1 + 3.00000012E-01).xyz;
    _pixel = _pixel*(1.80000007E-01/(_Luminance + 1.00000005E-03));
    _pixel = _pixel*(1.00000000E+00 + _pixel/6.40000045E-01);
    _pixel = _pixel - 5.00000000E+00;
    _TMP10 = max(_pixel, vec3( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00));
    _pixel = _TMP10/(1.00000000E+01 + _TMP10);
    _Color = _Color + _pixel*8.76399968E-03;
    _c0009 = TEX0.xy + _PixelOffsets[2]*5.00000000E+00;
    _TMP1 = texture2D(rubyTexture, _c0009);
    _pixel = (_TMP1 + 3.00000012E-01).xyz;
    _pixel = _pixel*(1.80000007E-01/(_Luminance + 1.00000005E-03));
    _pixel = _pixel*(1.00000000E+00 + _pixel/6.40000045E-01);
    _pixel = _pixel - 5.00000000E+00;
    _TMP10 = max(_pixel, vec3( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00));
    _pixel = _TMP10/(1.00000000E+01 + _TMP10);
    _Color = _Color + _pixel*2.69949995E-02;
    _c0009 = TEX0.xy + _PixelOffsets[3]*5.00000000E+00;
    _TMP1 = texture2D(rubyTexture, _c0009);
    _pixel = (_TMP1 + 3.00000012E-01).xyz;
    _pixel = _pixel*(1.80000007E-01/(_Luminance + 1.00000005E-03));
    _pixel = _pixel*(1.00000000E+00 + _pixel/6.40000045E-01);
    _pixel = _pixel - 5.00000000E+00;
    _TMP10 = max(_pixel, vec3( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00));
    _pixel = _TMP10/(1.00000000E+01 + _TMP10);
    _Color = _Color + _pixel*6.47590011E-02;
    _c0009 = TEX0.xy + _PixelOffsets[4]*5.00000000E+00;
    _TMP1 = texture2D(rubyTexture, _c0009);
    _pixel = (_TMP1 + 3.00000012E-01).xyz;
    _pixel = _pixel*(1.80000007E-01/(_Luminance + 1.00000005E-03));
    _pixel = _pixel*(1.00000000E+00 + _pixel/6.40000045E-01);
    _pixel = _pixel - 5.00000000E+00;
    _TMP10 = max(_pixel, vec3( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00));
    _pixel = _TMP10/(1.00000000E+01 + _TMP10);
    _Color = _Color + _pixel*1.20985001E-01;
    _c0009 = TEX0.xy + _PixelOffsets[5]*5.00000000E+00;
    _TMP1 = texture2D(rubyTexture, _c0009);
    _pixel = (_TMP1 + 3.00000012E-01).xyz;
    _pixel = _pixel*(1.80000007E-01/(_Luminance + 1.00000005E-03));
    _pixel = _pixel*(1.00000000E+00 + _pixel/6.40000045E-01);
    _pixel = _pixel - 5.00000000E+00;
    _TMP10 = max(_pixel, vec3( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00));
    _pixel = _TMP10/(1.00000000E+01 + _TMP10);
    _Color = _Color + _pixel*1.76033005E-01;
    _c0009 = TEX0.xy + _PixelOffsets[6]*5.00000000E+00;
    _TMP1 = texture2D(rubyTexture, _c0009);
    _pixel = (_TMP1 + 3.00000012E-01).xyz;
    _pixel = _pixel*(1.80000007E-01/(_Luminance + 1.00000005E-03));
    _pixel = _pixel*(1.00000000E+00 + _pixel/6.40000045E-01);
    _pixel = _pixel - 5.00000000E+00;
    _TMP10 = max(_pixel, vec3( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00));
    _pixel = _TMP10/(1.00000000E+01 + _TMP10);
    _Color = _Color + _pixel*1.99470997E-01;
    _c0009 = TEX0.xy + _PixelOffsets[7]*5.00000000E+00;
    _TMP1 = texture2D(rubyTexture, _c0009);
    _pixel = (_TMP1 + 3.00000012E-01).xyz;
    _pixel = _pixel*(1.80000007E-01/(_Luminance + 1.00000005E-03));
    _pixel = _pixel*(1.00000000E+00 + _pixel/6.40000045E-01);
    _pixel = _pixel - 5.00000000E+00;
    _TMP10 = max(_pixel, vec3( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00));
    _pixel = _TMP10/(1.00000000E+01 + _TMP10);
    _Color = _Color + _pixel*1.76033005E-01;
    _c0009 = TEX0.xy + _PixelOffsets[8]*5.00000000E+00;
    _TMP1 = texture2D(rubyTexture, _c0009);
    _pixel = (_TMP1 + 3.00000012E-01).xyz;
    _pixel = _pixel*(1.80000007E-01/(_Luminance + 1.00000005E-03));
    _pixel = _pixel*(1.00000000E+00 + _pixel/6.40000045E-01);
    _pixel = _pixel - 5.00000000E+00;
    _TMP10 = max(_pixel, vec3( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00));
    _pixel = _TMP10/(1.00000000E+01 + _TMP10);
    _Color = _Color + _pixel*1.20985001E-01;
    _c0009 = TEX0.xy + _PixelOffsets[9]*5.00000000E+00;
    _TMP1 = texture2D(rubyTexture, _c0009);
    _pixel = (_TMP1 + 3.00000012E-01).xyz;
    _pixel = _pixel*(1.80000007E-01/(_Luminance + 1.00000005E-03));
    _pixel = _pixel*(1.00000000E+00 + _pixel/6.40000045E-01);
    _pixel = _pixel - 5.00000000E+00;
    _TMP10 = max(_pixel, vec3( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00));
    _pixel = _TMP10/(1.00000000E+01 + _TMP10);
    _Color = _Color + _pixel*6.47590011E-02;
    _c0009 = TEX0.xy + _PixelOffsets[10]*5.00000000E+00;
    _TMP1 = texture2D(rubyTexture, _c0009);
    _pixel = (_TMP1 + 3.00000012E-01).xyz;
    _pixel = _pixel*(1.80000007E-01/(_Luminance + 1.00000005E-03));
    _pixel = _pixel*(1.00000000E+00 + _pixel/6.40000045E-01);
    _pixel = _pixel - 5.00000000E+00;
    _TMP10 = max(_pixel, vec3( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00));
    _pixel = _TMP10/(1.00000000E+01 + _TMP10);
    _Color = _Color + _pixel*2.69949995E-02;
    _c0009 = TEX0.xy + _PixelOffsets[11]*5.00000000E+00;
    _TMP1 = texture2D(rubyTexture, _c0009);
    _pixel = (_TMP1 + 3.00000012E-01).xyz;
    _pixel = _pixel*(1.80000007E-01/(_Luminance + 1.00000005E-03));
    _pixel = _pixel*(1.00000000E+00 + _pixel/6.40000045E-01);
    _pixel = _pixel - 5.00000000E+00;
    _TMP10 = max(_pixel, vec3( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00));
    _pixel = _TMP10/(1.00000000E+01 + _TMP10);
    _Color = _Color + _pixel*8.76399968E-03;
    _c0009 = TEX0.xy + _PixelOffsets[12]*5.00000000E+00;
    _TMP1 = texture2D(rubyTexture, _c0009);
    _pixel = (_TMP1 + 3.00000012E-01).xyz;
    _pixel = _pixel*(1.80000007E-01/(_Luminance + 1.00000005E-03));
    _pixel = _pixel*(1.00000000E+00 + _pixel/6.40000045E-01);
    _pixel = _pixel - 5.00000000E+00;
    _TMP10 = max(_pixel, vec3( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00));
    _pixel = _TMP10/(1.00000000E+01 + _TMP10);
    _Color = _Color + _pixel*2.21600011E-03;
    _TMP2 = texture2D(rubyTexture, TEX0.xy);
    _OUT._color = vec4(_Color.x, _Color.y, _Color.z, 1.00000000E+00) + _TMP2;
    gl_FragColor = _OUT._color;
    return;
} 
 ]]></fragment>
</shader>
