<?xml version="1.0" encoding="UTF-8"?>
<!-- XML/GLSL shader autogenerated by cg2xml.py -->
<shader language="GLSL" style="GLES2">
    <vertex><![CDATA[
varying     vec2 _CT;
varying     vec4 _position2;
varying     vec4 _color;
varying     vec2 _texCoord1;
varying     vec4 _position1;
varying     float _frame_rotation;
varying     float _frame_direction;
varying     float _frame_count;
varying     vec2 _output_dummy_size;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct VERTEX_OUTPUT {
    vec4 _position1;
    vec2 _texCoord1;
};
struct output_dummy {
    vec4 _color;
};
struct VERTEX_INPUT {
    vec4 _position2;
    vec2 _CT;
};
VERTEX_OUTPUT _ret_0;
uniform mat4 rubyMVPMatrix;
vec4 _r0005;
attribute vec4 rubyVertexCoord;
attribute vec4 rubyTexCoord;
varying vec4 TEX0;
 

         mat4 transpose_(mat4 matrix)
         {
            mat4 ret;
            for (int i = 0; i < 4; i++)
               for (int j = 0; j < 4; j++)
                  ret[i][j] = matrix[j][i];

            return ret;
         }
         
uniform mediump vec2 rubyOutputSize;
uniform mediump vec2 rubyTextureSize;
uniform mediump vec2 rubyInputSize;
void main()
{
    mat4 rubyMVPMatrix_ = transpose_(rubyMVPMatrix);
    _r0005.x = dot(rubyMVPMatrix_[0], rubyVertexCoord);
    _r0005.y = dot(rubyMVPMatrix_[1], rubyVertexCoord);
    _r0005.z = dot(rubyMVPMatrix_[2], rubyVertexCoord);
    _r0005.w = dot(rubyMVPMatrix_[3], rubyVertexCoord);
    _position1 = _r0005;
    _texCoord1 = rubyTexCoord.xy;
    gl_Position = _r0005;
    TEX0.xy = rubyTexCoord.xy;
    return;
    TEX0.xy = _texCoord1;
} 
 ]]></vertex>
    <fragment><![CDATA[
#ifdef GL_ES
precision mediump float;
#endif
varying     vec2 _CT;
varying     vec4 _color;
varying     vec2 _texCoord;
varying     float _frame_rotation;
varying     float _frame_direction;
varying     float _frame_count;
varying     vec2 _output_dummy_size;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct VERTEX_OUTPUT {
    vec2 _texCoord;
};
struct output_dummy {
    vec4 _color;
};
struct VERTEX_INPUT {
    vec2 _CT;
};
float _TMP6;
vec4 _TMP5;
uniform sampler2D rubyTexture;
float _TMP15;
float _a0016;
float _x0018;
float _TMP19;
float _a0020;
float _x0022;
float _TMP23;
float _a0024;
float _x0026;
vec2 _c0028;
varying vec4 TEX0;
uniform float _threshold;
 
uniform mediump vec2 rubyOutputSize;
uniform mediump vec2 rubyTextureSize;
uniform mediump vec2 rubyInputSize;
void main()
{
    vec4 _Color;
    vec3 _col[9];
    float _lum[9];
    float _x;
    float _y;
    float _edge;
    _Color = texture2D(rubyTexture, TEX0.xy);
    _a0016 = _Color.x*4.00000000E+00;
    _x0018 = _a0016 + 5.00000000E-01;
    _TMP15 = floor(_x0018);
    _Color.x = _TMP15/4.00000000E+00;
    _a0020 = _Color.y*4.00000000E+00;
    _x0022 = _a0020 + 5.00000000E-01;
    _TMP19 = floor(_x0022);
    _Color.y = _TMP19/4.00000000E+00;
    _a0024 = _Color.z*4.00000000E+00;
    _x0026 = _a0024 + 5.00000000E-01;
    _TMP23 = floor(_x0026);
    _Color.z = _TMP23/4.00000000E+00;
    _c0028 = TEX0.xy + vec2( -1.56250002E-03, 1.56250002E-03);
    _TMP5 = texture2D(rubyTexture, _c0028);
    _col[0] = _TMP5.xyz;
    _c0028 = TEX0.xy + vec2( 0.00000000E+00, 1.56250002E-03);
    _TMP5 = texture2D(rubyTexture, _c0028);
    _col[1] = _TMP5.xyz;
    _c0028 = TEX0.xy + vec2( 1.56250002E-03, 1.56250002E-03);
    _TMP5 = texture2D(rubyTexture, _c0028);
    _col[2] = _TMP5.xyz;
    _c0028 = TEX0.xy + vec2( -1.56250002E-03, 0.00000000E+00);
    _TMP5 = texture2D(rubyTexture, _c0028);
    _col[3] = _TMP5.xyz;
    _c0028 = TEX0.xy + vec2( 1.56250002E-03, 1.40000007E-03);
    _TMP5 = texture2D(rubyTexture, _c0028);
    _col[5] = _TMP5.xyz;
    _c0028 = TEX0.xy + vec2( -1.56250002E-03, -1.56250002E-03);
    _TMP5 = texture2D(rubyTexture, _c0028);
    _col[6] = _TMP5.xyz;
    _c0028 = TEX0.xy + vec2( 0.00000000E+00, -1.56250002E-03);
    _TMP5 = texture2D(rubyTexture, _c0028);
    _col[7] = _TMP5.xyz;
    _c0028 = TEX0.xy + vec2( 1.56250002E-03, -1.56250002E-03);
    _TMP5 = texture2D(rubyTexture, _c0028);
    _lum[0] = dot(_col[0].xyz, vec3( 3.00000012E-01, 5.89999974E-01, 1.09999999E-01));
    _lum[1] = dot(_col[1].xyz, vec3( 3.00000012E-01, 5.89999974E-01, 1.09999999E-01));
    _lum[2] = dot(_col[2].xyz, vec3( 3.00000012E-01, 5.89999974E-01, 1.09999999E-01));
    _lum[3] = dot(_col[3].xyz, vec3( 3.00000012E-01, 5.89999974E-01, 1.09999999E-01));
    _lum[5] = dot(_col[5].xyz, vec3( 3.00000012E-01, 5.89999974E-01, 1.09999999E-01));
    _lum[6] = dot(_col[6].xyz, vec3( 3.00000012E-01, 5.89999974E-01, 1.09999999E-01));
    _lum[7] = dot(_col[7].xyz, vec3( 3.00000012E-01, 5.89999974E-01, 1.09999999E-01));
    _lum[8] = dot(_TMP5.xyz, vec3( 3.00000012E-01, 5.89999974E-01, 1.09999999E-01));
    _x = (((_lum[2] + _lum[8] + 2.00000000E+00*_lum[5]) - _lum[0]) - 2.00000000E+00*_lum[3]) - _lum[6];
    _y = (((_lum[6] + 2.00000000E+00*_lum[7] + _lum[8]) - _lum[0]) - 2.00000000E+00*_lum[1]) - _lum[2];
    if (_x*_x + _y*_y < _threshold) { 
        _TMP6 = 1.00000000E+00;
    } else {
        _TMP6 = 0.00000000E+00;
    } 
    _edge = float(_TMP6);
    _Color.xyz = _Color.xyz*_edge;
    gl_FragColor = _Color;
    return;
} 
 ]]></fragment>
</shader>
