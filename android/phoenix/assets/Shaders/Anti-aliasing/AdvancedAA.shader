<?xml version="1.0" encoding="UTF-8"?>
<!-- XML/GLSL shader autogenerated by cg2xml.py -->
<shader language="GLSL" style="GLES2">
    <vertex><![CDATA[
varying     vec4 _t41;
varying     vec4 _t31;
varying     vec4 _t21;
varying     vec4 _t11;
varying     vec2 _CT;
varying     vec4 _position2;
varying     vec4 _color2;
varying     vec4 _t4;
varying     vec4 _t3;
varying     vec4 _t2;
varying     vec4 _t1;
varying     vec2 _texCoord1;
varying     vec4 _color1;
varying     vec4 _position1;
varying     float _frame_rotation;
varying     float _frame_direction;
varying     float _frame_count;
varying     vec2 _output_dummy_size;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct VERTEX_OUTPUT {
    vec4 _position1;
    vec4 _color1;
    vec2 _texCoord1;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
};
struct output_dummy {
    vec4 _color2;
};
struct VERTEX_INPUT {
    vec4 _position2;
    vec2 _CT;
    vec4 _t11;
    vec4 _t21;
    vec4 _t31;
    vec4 _t41;
};
VERTEX_OUTPUT _ret_0;
uniform mat4 rubyMVPMatrix;
uniform input_dummy _IN1;
vec4 _r0004;
attribute vec4 rubyVertexCoord;
attribute vec4 COLOR;
attribute vec4 rubyTexCoord;
varying vec4 COL0;
varying vec4 TEX0;
varying vec4 TEX1;
varying vec4 TEX2;
varying vec4 TEX3;
varying vec4 TEX4;
 

         mat4 transpose_(mat4 matrix)
         {
            mat4 ret;
            for (int i = 0; i < 4; i++)
               for (int j = 0; j < 4; j++)
                  ret[i][j] = matrix[j][i];

            return ret;
         }
         
uniform mediump vec2 rubyOutputSize;
uniform mediump vec2 rubyTextureSize;
uniform mediump vec2 rubyInputSize;
void main()
{
    mat4 rubyMVPMatrix_ = transpose_(rubyMVPMatrix);
    VERTEX_OUTPUT _OUT;
    vec2 _ps;
    float _dx;
    float _dy;
    _r0004.x = dot(rubyMVPMatrix_[0], rubyVertexCoord);
    _r0004.y = dot(rubyMVPMatrix_[1], rubyVertexCoord);
    _r0004.z = dot(rubyMVPMatrix_[2], rubyVertexCoord);
    _r0004.w = dot(rubyMVPMatrix_[3], rubyVertexCoord);
    _ps = vec2(1.00000000E+00/rubyTextureSize.x, 1.00000000E+00/rubyTextureSize.y);
    _dx = _ps.x*5.00000000E-01;
    _dy = _ps.y*5.00000000E-01;
    _OUT._t1.xy = rubyTexCoord.xy + vec2(-_dx, 0.00000000E+00);
    _OUT._t2.xy = rubyTexCoord.xy + vec2(_dx, 0.00000000E+00);
    _OUT._t3.xy = rubyTexCoord.xy + vec2(0.00000000E+00, -_dy);
    _OUT._t4.xy = rubyTexCoord.xy + vec2(0.00000000E+00, _dy);
    _OUT._t1.zw = rubyTexCoord.xy + vec2(-_dx, -_dy);
    _OUT._t2.zw = rubyTexCoord.xy + vec2(-_dx, _dy);
    _OUT._t3.zw = rubyTexCoord.xy + vec2(_dx, -_dy);
    _OUT._t4.zw = rubyTexCoord.xy + vec2(_dx, _dy);
    _position1 = _r0004;
    _color1 = COLOR;
    _texCoord1 = rubyTexCoord.xy;
    _t1 = _OUT._t1;
    _t2 = _OUT._t2;
    _t3 = _OUT._t3;
    _t4 = _OUT._t4;
    gl_Position = _r0004;
    COL0 = COLOR;
    TEX0.xy = rubyTexCoord.xy;
    TEX1 = _OUT._t1;
    TEX2 = _OUT._t2;
    TEX3 = _OUT._t3;
    TEX4 = _OUT._t4;
    return;
    COL0 = _color1;
    TEX0.xy = _texCoord1;
    TEX1 = _t1;
    TEX2 = _t2;
    TEX3 = _t3;
    TEX4 = _t4;
} 
 ]]></vertex>
    <fragment><![CDATA[
#ifdef GL_ES
precision mediump float;
#endif
varying     vec4 _t4;
varying     vec4 _t3;
varying     vec4 _t21;
varying     vec4 _t11;
varying     vec2 _CT;
varying     vec4 _color1;
varying     vec4 _t41;
varying     vec4 _t31;
varying     vec4 _t22;
varying     vec4 _t12;
varying     vec2 _texCoord;
varying     vec4 _color;
varying     float _frame_rotation;
varying     float _frame_direction;
varying     float _frame_count;
varying     vec2 _output_dummy_size;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct VERTEX_OUTPUT {
    vec4 _color;
    vec2 _texCoord;
    vec4 _t12;
    vec4 _t22;
    vec4 _t31;
    vec4 _t41;
};
struct output_dummy {
    vec4 _color1;
};
struct VERTEX_INPUT {
    vec2 _CT;
    vec4 _t11;
    vec4 _t21;
    vec4 _t3;
    vec4 _t4;
};
float _TMP20;
vec3 _TMP19;
float _TMP18;
vec3 _TMP17;
float _TMP16;
vec3 _TMP15;
float _TMP22;
vec3 _TMP21;
float _TMP14;
vec3 _TMP13;
float _TMP12;
vec3 _TMP11;
float _TMP10;
vec3 _TMP9;
vec4 _TMP8;
vec4 _TMP7;
vec4 _TMP6;
vec4 _TMP5;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec4 _TMP0;
uniform sampler2D rubyTexture;
vec3 _a0047;
vec3 _a0051;
vec3 _a0055;
vec3 _a0059;
vec3 _a0063;
vec3 _b0065;
vec3 _a0067;
vec3 _b0069;
varying vec4 TEX0;
varying vec4 TEX1;
varying vec4 TEX2;
varying vec4 TEX3;
varying vec4 TEX4;
uniform vec3 _dt;
 
uniform mediump vec2 rubyOutputSize;
uniform mediump vec2 rubyTextureSize;
uniform mediump vec2 rubyInputSize;
void main()
{
    output_dummy _OUT;
    vec3 _c00;
    vec3 _c10;
    vec3 _c20;
    vec3 _c01;
    vec3 _c11;
    vec3 _c21;
    vec3 _c02;
    vec3 _c12;
    vec3 _c22;
    float _d1;
    float _d2;
    float _hl;
    float _vl;
    float _k1;
    float _k2;
    vec3 _t1;
    vec3 _t2;
    vec3 _TMP27;
    _TMP0 = texture2D(rubyTexture, TEX1.zw);
    _c00 = vec3(float(_TMP0.x), float(_TMP0.y), float(_TMP0.z));
    _TMP1 = texture2D(rubyTexture, TEX3.xy);
    _c10 = vec3(float(_TMP1.x), float(_TMP1.y), float(_TMP1.z));
    _TMP2 = texture2D(rubyTexture, TEX3.zw);
    _c20 = vec3(float(_TMP2.x), float(_TMP2.y), float(_TMP2.z));
    _TMP3 = texture2D(rubyTexture, TEX1.xy);
    _c01 = vec3(float(_TMP3.x), float(_TMP3.y), float(_TMP3.z));
    _TMP4 = texture2D(rubyTexture, TEX0.xy);
    _c11 = vec3(float(_TMP4.x), float(_TMP4.y), float(_TMP4.z));
    _TMP5 = texture2D(rubyTexture, TEX2.xy);
    _c21 = vec3(float(_TMP5.x), float(_TMP5.y), float(_TMP5.z));
    _TMP6 = texture2D(rubyTexture, TEX2.zw);
    _c02 = vec3(float(_TMP6.x), float(_TMP6.y), float(_TMP6.z));
    _TMP7 = texture2D(rubyTexture, TEX4.xy);
    _c12 = vec3(float(_TMP7.x), float(_TMP7.y), float(_TMP7.z));
    _TMP8 = texture2D(rubyTexture, TEX4.zw);
    _c22 = vec3(float(_TMP8.x), float(_TMP8.y), float(_TMP8.z));
    _a0047 = _c00 - _c22;
    _TMP21 = abs(vec3(float(_a0047.x), float(_a0047.y), float(_a0047.z)));
    _TMP9 = vec3(float(_TMP21.x), float(_TMP21.y), float(_TMP21.z));
    _TMP22 = dot(vec3(float(_TMP9.x), float(_TMP9.y), float(_TMP9.z)), vec3(float(_dt.x), float(_dt.y), float(_dt.z)));
    _TMP10 = float(_TMP22);
    _d1 = float((_TMP10 + 1.00016594E-04));
    _a0051 = _c20 - _c02;
    _TMP21 = abs(vec3(float(_a0051.x), float(_a0051.y), float(_a0051.z)));
    _TMP11 = vec3(float(_TMP21.x), float(_TMP21.y), float(_TMP21.z));
    _TMP22 = dot(vec3(float(_TMP11.x), float(_TMP11.y), float(_TMP11.z)), vec3(float(_dt.x), float(_dt.y), float(_dt.z)));
    _TMP12 = float(_TMP22);
    _d2 = float((_TMP12 + 1.00016594E-04));
    _a0055 = _c01 - _c21;
    _TMP21 = abs(vec3(float(_a0055.x), float(_a0055.y), float(_a0055.z)));
    _TMP13 = vec3(float(_TMP21.x), float(_TMP21.y), float(_TMP21.z));
    _TMP22 = dot(vec3(float(_TMP13.x), float(_TMP13.y), float(_TMP13.z)), vec3(float(_dt.x), float(_dt.y), float(_dt.z)));
    _TMP14 = float(_TMP22);
    _hl = float((_TMP14 + 1.00016594E-04));
    _a0059 = _c10 - _c12;
    _TMP21 = abs(vec3(float(_a0059.x), float(_a0059.y), float(_a0059.z)));
    _TMP15 = vec3(float(_TMP21.x), float(_TMP21.y), float(_TMP21.z));
    _TMP22 = dot(vec3(float(_TMP15.x), float(_TMP15.y), float(_TMP15.z)), vec3(float(_dt.x), float(_dt.y), float(_dt.z)));
    _TMP16 = float(_TMP22);
    _vl = float((_TMP16 + 1.00016594E-04));
    _k1 = 5.00000000E-01*(_hl + _vl);
    _k2 = 5.00000000E-01*(_d1 + _d2);
    _t1 = (_hl*vec3(float((_c10 + _c12).x), float((_c10 + _c12).y), float((_c10 + _c12).z)) + _vl*vec3(float((_c01 + _c21).x), float((_c01 + _c21).y), float((_c01 + _c21).z)) + _k1*vec3(float(_c11.x), float(_c11.y), float(_c11.z)))/(2.50000000E+00*(_hl + _vl));
    _t2 = (_d1*vec3(float((_c20 + _c02).x), float((_c20 + _c02).y), float((_c20 + _c02).z)) + _d2*vec3(float((_c00 + _c22).x), float((_c00 + _c22).y), float((_c00 + _c22).z)) + _k2*vec3(float(_c11.x), float(_c11.y), float(_c11.z)))/(2.50000000E+00*(_d1 + _d2));
    _a0063 = _t1 - vec3(float(_c11.x), float(_c11.y), float(_c11.z));
    _TMP17 = abs(_a0063);
    _b0065 = vec3(float(_dt.x), float(_dt.y), float(_dt.z));
    _TMP18 = dot(_TMP17, _b0065);
    _k1 = _TMP18 + 9.99999975E-05;
    _a0067 = _t2 - vec3(float(_c11.x), float(_c11.y), float(_c11.z));
    _TMP19 = abs(_a0067);
    _b0069 = vec3(float(_dt.x), float(_dt.y), float(_dt.z));
    _TMP20 = dot(_TMP19, _b0069);
    _k2 = _TMP20 + 9.99999975E-05;
    _TMP27 = (_k1*_t2 + _k2*_t1)/(_k1 + _k2);
    _OUT._color1 = vec4(_TMP27.x, _TMP27.y, _TMP27.z, 1.00000000E+00);
    gl_FragColor = _OUT._color1;
    return;
} 
 ]]></fragment>
</shader>
