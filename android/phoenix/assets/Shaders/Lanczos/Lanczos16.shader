<?xml version="1.0" encoding="UTF-8"?>
<!-- XML/GLSL shader autogenerated by cg2xml.py -->
<shader language="GLSL" style="GLES2">
    <vertex><![CDATA[
varying     float _frame_rotation;
varying     float _frame_direction;
varying     float _frame_count;
varying     vec2 _output_dummy_size;
varying     vec4 _color1;
struct output_dummy {
    vec4 _color1;
};
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
vec4 _oPosition1;
uniform mat4 rubyMVPMatrix;
vec4 _r0004;
attribute vec4 rubyVertexCoord;
attribute vec4 COLOR;
attribute vec4 rubyTexCoord;
varying vec4 COL0;
varying vec4 TEX0;
 

         mat4 transpose_(mat4 matrix)
         {
            mat4 ret;
            for (int i = 0; i < 4; i++)
               for (int j = 0; j < 4; j++)
                  ret[i][j] = matrix[j][i];

            return ret;
         }
         
uniform mediump vec2 rubyOutputSize;
uniform mediump vec2 rubyTextureSize;
uniform mediump vec2 rubyInputSize;
void main()
{
    mat4 rubyMVPMatrix_ = transpose_(rubyMVPMatrix);
    vec4 _oColor;
    vec2 _otexCoord;
    _r0004.x = dot(rubyMVPMatrix_[0], rubyVertexCoord);
    _r0004.y = dot(rubyMVPMatrix_[1], rubyVertexCoord);
    _r0004.z = dot(rubyMVPMatrix_[2], rubyVertexCoord);
    _r0004.w = dot(rubyMVPMatrix_[3], rubyVertexCoord);
    _oPosition1 = _r0004;
    _oColor = COLOR;
    _otexCoord = rubyTexCoord.xy;
    gl_Position = _r0004;
    COL0 = COLOR;
    TEX0.xy = rubyTexCoord.xy;
} 
 ]]></vertex>
    <fragment><![CDATA[
#ifdef GL_ES
precision mediump float;
#endif
varying     float _frame_rotation;
varying     float _frame_direction;
varying     float _frame_count;
varying     vec2 _output_dummy_size;
varying     vec4 _color;
struct output_dummy {
    vec4 _color;
};
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
vec4 _TMP15;
vec4 _TMP14;
vec4 _TMP13;
vec4 _TMP12;
vec4 _TMP11;
vec4 _TMP10;
vec4 _TMP9;
vec4 _TMP8;
vec4 _TMP7;
vec4 _TMP6;
vec4 _TMP5;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec4 _TMP0;
float _TMP17;
float _TMP16;
uniform input_dummy _IN1;
uniform sampler2D rubyTexture;
float _TMP25;
float _x0026;
float _a0028;
float _a0030;
float _TMP31;
float _a0034;
float _a0036;
float _TMP37;
float _x0038;
float _a0040;
float _a0042;
float _TMP43;
float _x0044;
float _a0046;
float _a0048;
float _TMP49;
float _x0050;
float _a0052;
float _a0054;
float _TMP55;
float _a0058;
float _a0060;
float _TMP61;
float _x0062;
float _a0064;
float _a0066;
float _TMP67;
float _x0068;
float _a0070;
float _a0072;
vec2 _c0074;
vec2 _c0076;
vec2 _c0078;
vec2 _c0080;
vec2 _c0082;
vec2 _c0084;
vec2 _c0086;
vec2 _c0088;
vec2 _c0090;
vec2 _c0092;
vec2 _c0094;
vec2 _c0096;
vec2 _c0098;
vec2 _c0100;
vec2 _c0102;
vec2 _c0104;
varying vec4 TEX0;
 
uniform mediump vec2 rubyOutputSize;
uniform mediump vec2 rubyTextureSize;
uniform mediump vec2 rubyInputSize;
void main()
{
    vec2 _ps;
    vec2 _crd[16];
    vec3 _pix[16];
    vec2 _dx;
    vec2 _dy;
    vec2 _pixcoord;
    vec2 _fract;
    vec2 _coord0;
    output_dummy _OUT;
    vec3 _TMP22;
    _ps = vec2(9.99000013E-01/rubyTextureSize.x, 9.99000013E-01/rubyTextureSize.y);
    _dx = vec2(float(_ps.x), 0.00000000E+00);
    _dy = vec2(0.00000000E+00, float(_ps.y));
    _pixcoord = TEX0.xy/_ps;
    _fract = fract(_pixcoord);
    _coord0 = TEX0.xy - _fract*_ps;
    _crd[(4*0 + 0)] = vec2(float((_coord0 - _ps).x), float((_coord0 - _ps).y));
    _crd[(4*1 + 0)] = _crd[(4*0 + 0)] + _dx;
    _crd[(4*2 + 0)] = _crd[(4*1 + 0)] + _dx;
    _crd[(4*3 + 0)] = _crd[(4*2 + 0)] + _dx;
    _crd[(4*0 + 1)] = _crd[(4*0 + 0)] + _dy;
    _crd[(4*1 + 1)] = _crd[(4*0 + 1)] + _dx;
    _crd[(4*2 + 1)] = _crd[(4*1 + 1)] + _dx;
    _crd[(4*3 + 1)] = _crd[(4*2 + 1)] + _dx;
    _crd[(4*0 + 2)] = _crd[(4*0 + 1)] + _dy;
    _crd[(4*1 + 2)] = _crd[(4*0 + 2)] + _dx;
    _crd[(4*2 + 2)] = _crd[(4*1 + 2)] + _dx;
    _crd[(4*3 + 2)] = _crd[(4*2 + 2)] + _dx;
    _crd[(4*0 + 3)] = _crd[(4*0 + 2)] + _dy;
    _crd[(4*1 + 3)] = _crd[(4*0 + 3)] + _dx;
    _crd[(4*2 + 3)] = _crd[(4*1 + 3)] + _dx;
    _crd[(4*3 + 3)] = _crd[(4*2 + 3)] + _dx;
    _x0026 = 1.00000000E+00 + _fract.x;
    if (_x0026 == 0.00000000E+00) { 
        _TMP25 = 4.93359375E+00;
    } else {
        _a0028 = _x0026*1.57031250E+00;
        _TMP16 = sin(_a0028);
        _a0030 = _x0026*3.14062500E+00;
        _TMP17 = sin(_a0030);
        _TMP25 = (_TMP16*_TMP17)/(_x0026*_x0026);
    } 
    if (_fract.x == 0.00000000E+00) { 
        _TMP31 = 4.93359375E+00;
    } else {
        _a0034 = _fract.x*1.57031250E+00;
        _TMP16 = sin(_a0034);
        _a0036 = _fract.x*3.14062500E+00;
        _TMP17 = sin(_a0036);
        _TMP31 = (_TMP16*_TMP17)/(_fract.x*_fract.x);
    } 
    _x0038 = 1.00000000E+00 - _fract.x;
    if (_x0038 == 0.00000000E+00) { 
        _TMP37 = 4.93359375E+00;
    } else {
        _a0040 = _x0038*1.57031250E+00;
        _TMP16 = sin(_a0040);
        _a0042 = _x0038*3.14062500E+00;
        _TMP17 = sin(_a0042);
        _TMP37 = (_TMP16*_TMP17)/(_x0038*_x0038);
    } 
    _x0044 = 2.00000000E+00 - _fract.x;
    if (_x0044 == 0.00000000E+00) { 
        _TMP43 = 4.93359375E+00;
    } else {
        _a0046 = _x0044*1.57031250E+00;
        _TMP16 = sin(_a0046);
        _a0048 = _x0044*3.14062500E+00;
        _TMP17 = sin(_a0048);
        _TMP43 = (_TMP16*_TMP17)/(_x0044*_x0044);
    } 
    _x0050 = 1.00000000E+00 + _fract.y;
    if (_x0050 == 0.00000000E+00) { 
        _TMP49 = 4.93359375E+00;
    } else {
        _a0052 = _x0050*1.57031250E+00;
        _TMP16 = sin(_a0052);
        _a0054 = _x0050*3.14062500E+00;
        _TMP17 = sin(_a0054);
        _TMP49 = (_TMP16*_TMP17)/(_x0050*_x0050);
    } 
    if (_fract.y == 0.00000000E+00) { 
        _TMP55 = 4.93359375E+00;
    } else {
        _a0058 = _fract.y*1.57031250E+00;
        _TMP16 = sin(_a0058);
        _a0060 = _fract.y*3.14062500E+00;
        _TMP17 = sin(_a0060);
        _TMP55 = (_TMP16*_TMP17)/(_fract.y*_fract.y);
    } 
    _x0062 = 1.00000000E+00 - _fract.y;
    if (_x0062 == 0.00000000E+00) { 
        _TMP61 = 4.93359375E+00;
    } else {
        _a0064 = _x0062*1.57031250E+00;
        _TMP16 = sin(_a0064);
        _a0066 = _x0062*3.14062500E+00;
        _TMP17 = sin(_a0066);
        _TMP61 = (_TMP16*_TMP17)/(_x0062*_x0062);
    } 
    _x0068 = 2.00000000E+00 - _fract.y;
    if (_x0068 == 0.00000000E+00) { 
        _TMP67 = 4.93359375E+00;
    } else {
        _a0070 = _x0068*1.57031250E+00;
        _TMP16 = sin(_a0070);
        _a0072 = _x0068*3.14062500E+00;
        _TMP17 = sin(_a0072);
        _TMP67 = (_TMP16*_TMP17)/(_x0068*_x0068);
    } 
    _c0074 = vec2(float(_crd[(4*0 + 0)].x), float(_crd[(4*0 + 0)].y));
    _TMP0 = texture2D(rubyTexture, _c0074);
    _pix[(4*0 + 0)] = vec3(float(_TMP0.x), float(_TMP0.y), float(_TMP0.z));
    _c0076 = vec2(float(_crd[(4*1 + 0)].x), float(_crd[(4*1 + 0)].y));
    _TMP1 = texture2D(rubyTexture, _c0076);
    _pix[(4*1 + 0)] = vec3(float(_TMP1.x), float(_TMP1.y), float(_TMP1.z));
    _c0078 = vec2(float(_crd[(4*2 + 0)].x), float(_crd[(4*2 + 0)].y));
    _TMP2 = texture2D(rubyTexture, _c0078);
    _pix[(4*2 + 0)] = vec3(float(_TMP2.x), float(_TMP2.y), float(_TMP2.z));
    _c0080 = vec2(float(_crd[(4*3 + 0)].x), float(_crd[(4*3 + 0)].y));
    _TMP3 = texture2D(rubyTexture, _c0080);
    _pix[(4*3 + 0)] = vec3(float(_TMP3.x), float(_TMP3.y), float(_TMP3.z));
    _c0082 = vec2(float(_crd[(4*0 + 1)].x), float(_crd[(4*0 + 1)].y));
    _TMP4 = texture2D(rubyTexture, _c0082);
    _pix[(4*0 + 1)] = vec3(float(_TMP4.x), float(_TMP4.y), float(_TMP4.z));
    _c0084 = vec2(float(_crd[(4*1 + 1)].x), float(_crd[(4*1 + 1)].y));
    _TMP5 = texture2D(rubyTexture, _c0084);
    _pix[(4*1 + 1)] = vec3(float(_TMP5.x), float(_TMP5.y), float(_TMP5.z));
    _c0086 = vec2(float(_crd[(4*2 + 1)].x), float(_crd[(4*2 + 1)].y));
    _TMP6 = texture2D(rubyTexture, _c0086);
    _pix[(4*2 + 1)] = vec3(float(_TMP6.x), float(_TMP6.y), float(_TMP6.z));
    _c0088 = vec2(float(_crd[(4*3 + 1)].x), float(_crd[(4*3 + 1)].y));
    _TMP7 = texture2D(rubyTexture, _c0088);
    _pix[(4*3 + 1)] = vec3(float(_TMP7.x), float(_TMP7.y), float(_TMP7.z));
    _c0090 = vec2(float(_crd[(4*0 + 2)].x), float(_crd[(4*0 + 2)].y));
    _TMP8 = texture2D(rubyTexture, _c0090);
    _pix[(4*0 + 2)] = vec3(float(_TMP8.x), float(_TMP8.y), float(_TMP8.z));
    _c0092 = vec2(float(_crd[(4*1 + 2)].x), float(_crd[(4*1 + 2)].y));
    _TMP9 = texture2D(rubyTexture, _c0092);
    _pix[(4*1 + 2)] = vec3(float(_TMP9.x), float(_TMP9.y), float(_TMP9.z));
    _c0094 = vec2(float(_crd[(4*2 + 2)].x), float(_crd[(4*2 + 2)].y));
    _TMP10 = texture2D(rubyTexture, _c0094);
    _pix[(4*2 + 2)] = vec3(float(_TMP10.x), float(_TMP10.y), float(_TMP10.z));
    _c0096 = vec2(float(_crd[(4*3 + 2)].x), float(_crd[(4*3 + 2)].y));
    _TMP11 = texture2D(rubyTexture, _c0096);
    _pix[(4*3 + 2)] = vec3(float(_TMP11.x), float(_TMP11.y), float(_TMP11.z));
    _c0098 = vec2(float(_crd[(4*0 + 3)].x), float(_crd[(4*0 + 3)].y));
    _TMP12 = texture2D(rubyTexture, _c0098);
    _pix[(4*0 + 3)] = vec3(float(_TMP12.x), float(_TMP12.y), float(_TMP12.z));
    _c0100 = vec2(float(_crd[(4*1 + 3)].x), float(_crd[(4*1 + 3)].y));
    _TMP13 = texture2D(rubyTexture, _c0100);
    _pix[(4*1 + 3)] = vec3(float(_TMP13.x), float(_TMP13.y), float(_TMP13.z));
    _c0102 = vec2(float(_crd[(4*2 + 3)].x), float(_crd[(4*2 + 3)].y));
    _TMP14 = texture2D(rubyTexture, _c0102);
    _pix[(4*2 + 3)] = vec3(float(_TMP14.x), float(_TMP14.y), float(_TMP14.z));
    _c0104 = vec2(float(_crd[(4*3 + 3)].x), float(_crd[(4*3 + 3)].y));
    _TMP15 = texture2D(rubyTexture, _c0104);
    _pix[(4*3 + 3)] = vec3(float(_TMP15.x), float(_TMP15.y), float(_TMP15.z));
    _pix[(4*0 + 0)] = vec3(float((((vec3(float((-_pix[(4*0 + 0)]).x), float((-_pix[(4*0 + 0)]).y), float((-_pix[(4*0 + 0)]).z))*_TMP25 + vec3(float(_pix[(4*1 + 0)].x), float(_pix[(4*1 + 0)].y), float(_pix[(4*1 + 0)].z))*_TMP31 + vec3(float(_pix[(4*2 + 0)].x), float(_pix[(4*2 + 0)].y), float(_pix[(4*2 + 0)].z))*_TMP37) - vec3(float(_pix[(4*3 + 0)].x), float(_pix[(4*3 + 0)].y), float(_pix[(4*3 + 0)].z))*_TMP43)*_TMP49).x), float((((vec3(float((-_pix[(4*0 + 0)]).x), float((-_pix[(4*0 + 0)]).y), float((-_pix[(4*0 + 0)]).z))*_TMP25 + vec3(float(_pix[(4*1 + 0)].x), float(_pix[(4*1 + 0)].y), float(_pix[(4*1 + 0)].z))*_TMP31 + vec3(float(_pix[(4*2 + 0)].x), float(_pix[(4*2 + 0)].y), float(_pix[(4*2 + 0)].z))*_TMP37) - vec3(float(_pix[(4*3 + 0)].x), float(_pix[(4*3 + 0)].y), float(_pix[(4*3 + 0)].z))*_TMP43)*_TMP49).y), float((((vec3(float((-_pix[(4*0 + 0)]).x), float((-_pix[(4*0 + 0)]).y), float((-_pix[(4*0 + 0)]).z))*_TMP25 + vec3(float(_pix[(4*1 + 0)].x), float(_pix[(4*1 + 0)].y), float(_pix[(4*1 + 0)].z))*_TMP31 + vec3(float(_pix[(4*2 + 0)].x), float(_pix[(4*2 + 0)].y), float(_pix[(4*2 + 0)].z))*_TMP37) - vec3(float(_pix[(4*3 + 0)].x), float(_pix[(4*3 + 0)].y), float(_pix[(4*3 + 0)].z))*_TMP43)*_TMP49).z));
    _pix[(4*0 + 1)] = vec3(float(((vec3(float(_pix[(4*0 + 1)].x), float(_pix[(4*0 + 1)].y), float(_pix[(4*0 + 1)].z))*_TMP25 + vec3(float(_pix[(4*1 + 1)].x), float(_pix[(4*1 + 1)].y), float(_pix[(4*1 + 1)].z))*_TMP31 + vec3(float(_pix[(4*2 + 1)].x), float(_pix[(4*2 + 1)].y), float(_pix[(4*2 + 1)].z))*_TMP37 + vec3(float(_pix[(4*3 + 1)].x), float(_pix[(4*3 + 1)].y), float(_pix[(4*3 + 1)].z))*_TMP43)*_TMP55).x), float(((vec3(float(_pix[(4*0 + 1)].x), float(_pix[(4*0 + 1)].y), float(_pix[(4*0 + 1)].z))*_TMP25 + vec3(float(_pix[(4*1 + 1)].x), float(_pix[(4*1 + 1)].y), float(_pix[(4*1 + 1)].z))*_TMP31 + vec3(float(_pix[(4*2 + 1)].x), float(_pix[(4*2 + 1)].y), float(_pix[(4*2 + 1)].z))*_TMP37 + vec3(float(_pix[(4*3 + 1)].x), float(_pix[(4*3 + 1)].y), float(_pix[(4*3 + 1)].z))*_TMP43)*_TMP55).y), float(((vec3(float(_pix[(4*0 + 1)].x), float(_pix[(4*0 + 1)].y), float(_pix[(4*0 + 1)].z))*_TMP25 + vec3(float(_pix[(4*1 + 1)].x), float(_pix[(4*1 + 1)].y), float(_pix[(4*1 + 1)].z))*_TMP31 + vec3(float(_pix[(4*2 + 1)].x), float(_pix[(4*2 + 1)].y), float(_pix[(4*2 + 1)].z))*_TMP37 + vec3(float(_pix[(4*3 + 1)].x), float(_pix[(4*3 + 1)].y), float(_pix[(4*3 + 1)].z))*_TMP43)*_TMP55).z));
    _pix[(4*0 + 2)] = vec3(float(((vec3(float(_pix[(4*0 + 2)].x), float(_pix[(4*0 + 2)].y), float(_pix[(4*0 + 2)].z))*_TMP25 + vec3(float(_pix[(4*1 + 2)].x), float(_pix[(4*1 + 2)].y), float(_pix[(4*1 + 2)].z))*_TMP31 + vec3(float(_pix[(4*2 + 2)].x), float(_pix[(4*2 + 2)].y), float(_pix[(4*2 + 2)].z))*_TMP37 + vec3(float(_pix[(4*3 + 2)].x), float(_pix[(4*3 + 2)].y), float(_pix[(4*3 + 2)].z))*_TMP43)*_TMP61).x), float(((vec3(float(_pix[(4*0 + 2)].x), float(_pix[(4*0 + 2)].y), float(_pix[(4*0 + 2)].z))*_TMP25 + vec3(float(_pix[(4*1 + 2)].x), float(_pix[(4*1 + 2)].y), float(_pix[(4*1 + 2)].z))*_TMP31 + vec3(float(_pix[(4*2 + 2)].x), float(_pix[(4*2 + 2)].y), float(_pix[(4*2 + 2)].z))*_TMP37 + vec3(float(_pix[(4*3 + 2)].x), float(_pix[(4*3 + 2)].y), float(_pix[(4*3 + 2)].z))*_TMP43)*_TMP61).y), float(((vec3(float(_pix[(4*0 + 2)].x), float(_pix[(4*0 + 2)].y), float(_pix[(4*0 + 2)].z))*_TMP25 + vec3(float(_pix[(4*1 + 2)].x), float(_pix[(4*1 + 2)].y), float(_pix[(4*1 + 2)].z))*_TMP31 + vec3(float(_pix[(4*2 + 2)].x), float(_pix[(4*2 + 2)].y), float(_pix[(4*2 + 2)].z))*_TMP37 + vec3(float(_pix[(4*3 + 2)].x), float(_pix[(4*3 + 2)].y), float(_pix[(4*3 + 2)].z))*_TMP43)*_TMP61).z));
    _pix[(4*0 + 3)] = vec3(float((((vec3(float((-_pix[(4*0 + 3)]).x), float((-_pix[(4*0 + 3)]).y), float((-_pix[(4*0 + 3)]).z))*_TMP25 + vec3(float(_pix[(4*1 + 3)].x), float(_pix[(4*1 + 3)].y), float(_pix[(4*1 + 3)].z))*_TMP31 + vec3(float(_pix[(4*2 + 3)].x), float(_pix[(4*2 + 3)].y), float(_pix[(4*2 + 3)].z))*_TMP37) - vec3(float(_pix[(4*3 + 3)].x), float(_pix[(4*3 + 3)].y), float(_pix[(4*3 + 3)].z))*_TMP43)*_TMP67).x), float((((vec3(float((-_pix[(4*0 + 3)]).x), float((-_pix[(4*0 + 3)]).y), float((-_pix[(4*0 + 3)]).z))*_TMP25 + vec3(float(_pix[(4*1 + 3)].x), float(_pix[(4*1 + 3)].y), float(_pix[(4*1 + 3)].z))*_TMP31 + vec3(float(_pix[(4*2 + 3)].x), float(_pix[(4*2 + 3)].y), float(_pix[(4*2 + 3)].z))*_TMP37) - vec3(float(_pix[(4*3 + 3)].x), float(_pix[(4*3 + 3)].y), float(_pix[(4*3 + 3)].z))*_TMP43)*_TMP67).y), float((((vec3(float((-_pix[(4*0 + 3)]).x), float((-_pix[(4*0 + 3)]).y), float((-_pix[(4*0 + 3)]).z))*_TMP25 + vec3(float(_pix[(4*1 + 3)].x), float(_pix[(4*1 + 3)].y), float(_pix[(4*1 + 3)].z))*_TMP31 + vec3(float(_pix[(4*2 + 3)].x), float(_pix[(4*2 + 3)].y), float(_pix[(4*2 + 3)].z))*_TMP37) - vec3(float(_pix[(4*3 + 3)].x), float(_pix[(4*3 + 3)].y), float(_pix[(4*3 + 3)].z))*_TMP43)*_TMP67).z));
    _TMP22 = vec3(float((_pix[(4*0 + 0)] + _pix[(4*0 + 1)] + _pix[(4*0 + 2)] + _pix[(4*0 + 3)]).x), float((_pix[(4*0 + 0)] + _pix[(4*0 + 1)] + _pix[(4*0 + 2)] + _pix[(4*0 + 3)]).y), float((_pix[(4*0 + 0)] + _pix[(4*0 + 1)] + _pix[(4*0 + 2)] + _pix[(4*0 + 3)]).z))/((_TMP25 + _TMP31 + _TMP37 + _TMP43)*(_TMP49 + _TMP55 + _TMP61 + _TMP67) - 2.00000000E+00*(_TMP25 + _TMP43)*(_TMP49 + _TMP67));
    _OUT._color = vec4(_TMP22.x, _TMP22.y, _TMP22.z, 1.00000000E+00);
    gl_FragColor = _OUT._color;
    return;
} 
 ]]></fragment>
</shader>
