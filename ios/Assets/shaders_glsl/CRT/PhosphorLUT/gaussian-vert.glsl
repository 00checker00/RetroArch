// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)
varying     vec4 _col;
varying     float _frame_rotation;
varying     vec2 _texCoord_size;
struct input_dummy {
    vec2 _video_size;
    vec2 _texCoord_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
float _placeholder25;
};
struct output_dummy {
    vec4 _col;
};
vec4 _oPosition1;
uniform mat4 MVPMatrix;
vec4 _r0002;
attribute vec4 VertexCoord;
attribute vec4 TexCoord;
varying vec4 TEX0;
 

         mat4 transpose_(mat4 matrix)
         {
            mat4 ret;
            for (int i = 0; i < 4; i++)
               for (int j = 0; j < 4; j++)
                  ret[i][j] = matrix[j][i];

            return ret;
         }
         
uniform int FrameDirection;
uniform int FrameCount;
#ifdef GL_ES
uniform mediump vec2 OutputSize;
uniform mediump vec2 TextureSize;
uniform mediump vec2 InputSize;
#else
uniform vec2 OutputSize;
uniform vec2 TextureSize;
uniform vec2 InputSize;
#endif
void main()
{
    mat4 MVPMatrix_ = transpose_(MVPMatrix);
    vec2 _otexCoord;
    _r0002.x = dot(MVPMatrix_[0], VertexCoord);
    _r0002.y = dot(MVPMatrix_[1], VertexCoord);
    _r0002.z = dot(MVPMatrix_[2], VertexCoord);
    _r0002.w = dot(MVPMatrix_[3], VertexCoord);
    _oPosition1 = _r0002;
    _otexCoord = TexCoord.xy;
    gl_Position = _r0002;
    TEX0.xy = TexCoord.xy;
} 
#elif defined(FRAGMENT)
#ifdef GL_ES
precision mediump float;
#endif
varying     vec4 _col;
varying     float _frame_rotation;
varying     vec2 _texCoord_size;
struct input_dummy {
    vec2 _video_size;
    vec2 _texCoord_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
float _placeholder29;
};
struct output_dummy {
    vec4 _col;
};
vec4 _TMP8;
vec4 _TMP7;
vec4 _TMP6;
vec4 _TMP5;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec4 _TMP0;
input_dummy _IN1;
float _TMP10;
float _TMP14;
float _TMP18;
float _TMP22;
vec2 _c0027;
vec2 _c0029;
vec2 _c0031;
vec2 _c0033;
vec2 _c0035;
vec2 _c0037;
vec2 _c0039;
vec2 _c0041;
vec2 _c0043;
varying vec4 TEX0;
 
uniform sampler2D Texture;
uniform int FrameDirection;
uniform int FrameCount;
#ifdef GL_ES
uniform mediump vec2 OutputSize;
uniform mediump vec2 TextureSize;
uniform mediump vec2 InputSize;
#else
uniform vec2 OutputSize;
uniform vec2 TextureSize;
uniform vec2 InputSize;
#endif
void main()
{
    float _oney;
    vec4 _sum;
    output_dummy _OUT;
    _oney = 1.00000000E+00/OutputSize.y;
    _TMP10 = pow(2.71828198E+00, -1.56250000E-02);
    _TMP14 = pow(2.71828198E+00, -6.25000000E-02);
    _TMP18 = pow(2.71828198E+00, -1.40625000E-01);
    _TMP22 = pow(2.71828198E+00, -2.50000000E-01);
    _c0027 = vec2(TEX0.x, TEX0.y - 4.00000000E+00*_oney);
    _TMP0 = texture2D(Texture, _c0027);
    _sum = _TMP0*vec4(_TMP22, _TMP22, _TMP22, _TMP22);
    _c0029 = vec2(TEX0.x, TEX0.y - 3.00000000E+00*_oney);
    _TMP1 = texture2D(Texture, _c0029);
    _sum = _sum + _TMP1*vec4(_TMP18, _TMP18, _TMP18, _TMP18);
    _c0031 = vec2(TEX0.x, TEX0.y - 2.00000000E+00*_oney);
    _TMP2 = texture2D(Texture, _c0031);
    _sum = _sum + _TMP2*vec4(_TMP14, _TMP14, _TMP14, _TMP14);
    _c0033 = vec2(TEX0.x, TEX0.y - _oney);
    _TMP3 = texture2D(Texture, _c0033);
    _sum = _sum + _TMP3*vec4(_TMP10, _TMP10, _TMP10, _TMP10);
    _c0035 = vec2(TEX0.x, TEX0.y);
    _TMP4 = texture2D(Texture, _c0035);
    _sum = _sum + _TMP4*1.59999996E-01;
    _c0037 = vec2(TEX0.x, TEX0.y + _oney);
    _TMP5 = texture2D(Texture, _c0037);
    _sum = _sum + _TMP5*vec4(_TMP10, _TMP10, _TMP10, _TMP10);
    _c0039 = vec2(TEX0.x, TEX0.y + 2.00000000E+00*_oney);
    _TMP6 = texture2D(Texture, _c0039);
    _sum = _sum + _TMP6*vec4(_TMP14, _TMP14, _TMP14, _TMP14);
    _c0041 = vec2(TEX0.x, TEX0.y + 3.00000000E+00*_oney);
    _TMP7 = texture2D(Texture, _c0041);
    _sum = _sum + _TMP7*vec4(_TMP18, _TMP18, _TMP18, _TMP18);
    _c0043 = vec2(TEX0.x, TEX0.y + 4.00000000E+00*_oney);
    _TMP8 = texture2D(Texture, _c0043);
    _sum = _sum + _TMP8*vec4(_TMP22, _TMP22, _TMP22, _TMP22);
    _OUT._col = _sum/4.00000000E+00;
    gl_FragColor = _OUT._col;
    return;
} 
#endif
