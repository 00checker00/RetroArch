// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)
varying     vec4 _col;
varying     float _frame_rotation;
varying     vec2 _texCoord_size;
struct input_dummy {
    vec2 _video_size;
    vec2 _texCoord_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
float _placeholder25;
};
struct output_dummy {
    vec4 _col;
};
vec4 _oPosition1;
uniform mat4 MVPMatrix;
vec4 _r0002;
attribute vec4 VertexCoord;
attribute vec4 TexCoord;
varying vec4 TEX0;
 

         mat4 transpose_(mat4 matrix)
         {
            mat4 ret;
            for (int i = 0; i < 4; i++)
               for (int j = 0; j < 4; j++)
                  ret[i][j] = matrix[j][i];

            return ret;
         }
         
uniform int FrameDirection;
uniform int FrameCount;
#ifdef GL_ES
uniform mediump vec2 OutputSize;
uniform mediump vec2 TextureSize;
uniform mediump vec2 InputSize;
#else
uniform vec2 OutputSize;
uniform vec2 TextureSize;
uniform vec2 InputSize;
#endif
void main()
{
    mat4 MVPMatrix_ = transpose_(MVPMatrix);
    vec2 _otexCoord;
    _r0002.x = dot(MVPMatrix_[0], VertexCoord);
    _r0002.y = dot(MVPMatrix_[1], VertexCoord);
    _r0002.z = dot(MVPMatrix_[2], VertexCoord);
    _r0002.w = dot(MVPMatrix_[3], VertexCoord);
    _oPosition1 = _r0002;
    _otexCoord = TexCoord.xy;
    gl_Position = _r0002;
    TEX0.xy = TexCoord.xy;
} 
#elif defined(FRAGMENT)
#ifdef GL_ES
precision mediump float;
#endif
varying     vec4 _col;
varying     float _frame_rotation;
varying     vec2 _texCoord_size;
struct input_dummy {
    vec2 _video_size;
    vec2 _texCoord_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
float _placeholder30;
};
struct output_dummy {
    vec4 _col;
};
vec4 _TMP8;
vec4 _TMP7;
vec4 _TMP6;
vec4 _TMP5;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec4 _TMP0;
input_dummy _IN1;
float _TMP11;
float _TMP15;
float _TMP19;
float _TMP23;
vec2 _c0028;
vec2 _c0030;
vec2 _c0032;
vec2 _c0034;
vec2 _c0036;
vec2 _c0038;
vec2 _c0040;
vec2 _c0042;
vec2 _c0044;
varying vec4 TEX0;
 
uniform sampler2D Texture;
uniform int FrameDirection;
uniform int FrameCount;
#ifdef GL_ES
uniform mediump vec2 OutputSize;
uniform mediump vec2 TextureSize;
uniform mediump vec2 InputSize;
#else
uniform vec2 OutputSize;
uniform vec2 TextureSize;
uniform vec2 InputSize;
#endif
void main()
{
    float _oney;
    vec4 _sum;
    output_dummy _OUT;
    _oney = 1.00000000E+00/OutputSize.y;
    _TMP11 = pow(2.71828198E+00, -9.99999978E-03);
    _TMP15 = pow(2.71828198E+00, -3.99999991E-02);
    _TMP19 = pow(2.71828198E+00, -8.99999961E-02);
    _TMP23 = pow(2.71828198E+00, -1.59999996E-01);
    _c0028 = vec2(TEX0.x - 4.00000000E+00*_oney, TEX0.y);
    _TMP0 = texture2D(Texture, _c0028);
    _sum = _TMP0*vec4(_TMP23, _TMP23, _TMP23, _TMP23);
    _c0030 = vec2(TEX0.x - 3.00000000E+00*_oney, TEX0.y);
    _TMP1 = texture2D(Texture, _c0030);
    _sum = _sum + _TMP1*vec4(_TMP19, _TMP19, _TMP19, _TMP19);
    _c0032 = vec2(TEX0.x - 2.00000000E+00*_oney, TEX0.y);
    _TMP2 = texture2D(Texture, _c0032);
    _sum = _sum + _TMP2*vec4(_TMP15, _TMP15, _TMP15, _TMP15);
    _c0034 = vec2(TEX0.x - _oney, TEX0.y);
    _TMP3 = texture2D(Texture, _c0034);
    _sum = _sum + _TMP3*vec4(_TMP11, _TMP11, _TMP11, _TMP11);
    _c0036 = vec2(TEX0.x, TEX0.y);
    _TMP4 = texture2D(Texture, _c0036);
    _sum = _sum + _TMP4*1.59999996E-01;
    _c0038 = vec2(TEX0.x + _oney, TEX0.y);
    _TMP5 = texture2D(Texture, _c0038);
    _sum = _sum + _TMP5*vec4(_TMP11, _TMP11, _TMP11, _TMP11);
    _c0040 = vec2(TEX0.x + 2.00000000E+00*_oney, TEX0.y);
    _TMP6 = texture2D(Texture, _c0040);
    _sum = _sum + _TMP6*vec4(_TMP15, _TMP15, _TMP15, _TMP15);
    _c0042 = vec2(TEX0.x + 3.00000000E+00*_oney, TEX0.y);
    _TMP7 = texture2D(Texture, _c0042);
    _sum = _sum + _TMP7*vec4(_TMP19, _TMP19, _TMP19, _TMP19);
    _c0044 = vec2(TEX0.x + 4.00000000E+00*_oney, TEX0.y);
    _TMP8 = texture2D(Texture, _c0044);
    _sum = _sum + _TMP8*vec4(_TMP23, _TMP23, _TMP23, _TMP23);
    _OUT._col = _sum/4.00000000E+00;
    gl_FragColor = _OUT._col;
    return;
} 
#endif
