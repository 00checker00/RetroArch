// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)
varying     vec4 VARt7;
varying     vec4 VARt6;
varying     vec4 VARt5;
varying     vec4 VARt4;
varying     vec4 VARt3;
varying     vec4 VARt2;
varying     vec4 VARt1;
varying     vec2 _texCoord1;
varying     vec4 _color1;
varying     vec4 _position1;
varying     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct out_vertex {
    vec4 _position1;
    vec4 _color1;
    vec2 _texCoord1;
    vec4 VARt1;
    vec4 VARt2;
    vec4 VARt3;
    vec4 VARt4;
    vec4 VARt5;
    vec4 VARt6;
    vec4 VARt7;
};
out_vertex _ret_0;
float _TMP1;
uniform mat4 MVPMatrix;
input_dummy _IN1;
vec4 _r0005;
vec4 _v0005;
attribute vec4 VertexCoord;
attribute vec4 COLOR;
attribute vec4 TexCoord;
varying vec4 COL0;
varying vec4 TEX0;
 

         mat4 transpose_(mat4 matrix)
         {
            mat4 ret;
            for (int i = 0; i < 4; i++)
               for (int j = 0; j < 4; j++)
                  ret[i][j] = matrix[j][i];

            return ret;
         }
         
uniform int FrameDirection;
uniform int FrameCount;
#ifdef GL_ES
uniform mediump vec2 OutputSize;
uniform mediump vec2 TextureSize;
uniform mediump vec2 InputSize;
#else
uniform vec2 OutputSize;
uniform vec2 TextureSize;
uniform vec2 InputSize;
#endif
void main()
{
    mat4 MVPMatrix_ = transpose_(MVPMatrix);
    out_vertex _OUT;
    vec2 _ps;
    _v0005 = vec4(float(VertexCoord.x), float(VertexCoord.y), float(VertexCoord.z), float(VertexCoord.w));
    _TMP1 = dot(vec4(float(MVPMatrix_[0].x), float(MVPMatrix_[0].y), float(MVPMatrix_[0].z), float(MVPMatrix_[0].w)), vec4(float(_v0005.x), float(_v0005.y), float(_v0005.z), float(_v0005.w)));
    _r0005.x = float(_TMP1);
    _TMP1 = dot(vec4(float(MVPMatrix_[1].x), float(MVPMatrix_[1].y), float(MVPMatrix_[1].z), float(MVPMatrix_[1].w)), vec4(float(_v0005.x), float(_v0005.y), float(_v0005.z), float(_v0005.w)));
    _r0005.y = float(_TMP1);
    _TMP1 = dot(vec4(float(MVPMatrix_[2].x), float(MVPMatrix_[2].y), float(MVPMatrix_[2].z), float(MVPMatrix_[2].w)), vec4(float(_v0005.x), float(_v0005.y), float(_v0005.z), float(_v0005.w)));
    _r0005.z = float(_TMP1);
    _TMP1 = dot(vec4(float(MVPMatrix_[3].x), float(MVPMatrix_[3].y), float(MVPMatrix_[3].z), float(MVPMatrix_[3].w)), vec4(float(_v0005.x), float(_v0005.y), float(_v0005.z), float(_v0005.w)));
    _r0005.w = float(_TMP1);
    _OUT._position1 = vec4(float(_r0005.x), float(_r0005.y), float(_r0005.z), float(_r0005.w));
    _ps = vec2(float((1.00000000E+00/TextureSize.x)), float((1.00000000E+00/TextureSize.y)));
    _OUT.VARt1 = TexCoord.xxxy + vec4(float(-_ps.x), 0.00000000E+00, float(_ps.x), float((-2.00000000E+00*_ps.y)));
    _OUT.VARt2 = TexCoord.xxxy + vec4(float(-_ps.x), 0.00000000E+00, float(_ps.x), float(-_ps.y));
    _OUT.VARt3 = TexCoord.xxxy + vec4(float(-_ps.x), 0.00000000E+00, float(_ps.x), 0.00000000E+00);
    _OUT.VARt4 = TexCoord.xxxy + vec4(float(-_ps.x), 0.00000000E+00, float(_ps.x), float(_ps.y));
    _OUT.VARt5 = TexCoord.xxxy + vec4(float(-_ps.x), 0.00000000E+00, float(_ps.x), float((2.00000000E+00*_ps.y)));
    _OUT.VARt6 = TexCoord.xyyy + vec4(float((-2.00000000E+00*_ps.x)), float(-_ps.y), 0.00000000E+00, float(_ps.y));
    _OUT.VARt7 = TexCoord.xyyy + vec4(float((2.00000000E+00*_ps.x)), float(-_ps.y), 0.00000000E+00, float(_ps.y));
    _ret_0._position1 = _OUT._position1;
    _ret_0._color1 = COLOR;
    _ret_0._texCoord1 = TexCoord.xy;
    VARt1 = _OUT.VARt1;
    VARt2 = _OUT.VARt2;
    VARt3 = _OUT.VARt3;
    VARt4 = _OUT.VARt4;
    VARt5 = _OUT.VARt5;
    VARt6 = _OUT.VARt6;
    VARt7 = _OUT.VARt7;
    gl_Position = _OUT._position1;
    COL0 = COLOR;
    TEX0.xy = TexCoord.xy;
    return;
    COL0 = _ret_0._color1;
    TEX0.xy = _ret_0._texCoord1;
} 
#elif defined(FRAGMENT)
#ifdef GL_ES
precision mediump float;
#endif
varying     vec4 VARt7;
varying     vec4 VARt6;
varying     vec4 _t5;
varying     vec4 VARt4;
varying     vec4 VARt3;
varying     vec4 VARt2;
varying     vec4 _t1;
varying     vec2 _texCoord;
varying     vec4 _color1;
varying     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct out_vertex {
    vec4 _color1;
    vec2 _texCoord;
    vec4 _t1;
    vec4 VARt2;
    vec4 VARt3;
    vec4 VARt4;
    vec4 _t5;
    vec4 VARt6;
    vec4 VARt7;
};
vec4 _ret_0;
vec3 _TMP11;
vec3 _TMP17;
float _TMP16;
float _TMP15;
float _TMP14;
vec3 _TMP13;
vec3 _TMP10;
vec3 _TMP9;
vec4 _TMP8;
vec4 _TMP7;
vec4 _TMP5;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
out_vertex _VAR1;
uniform sampler2D Texture;
input_dummy _IN1;
vec2 _x0023;
vec3 _b0045;
vec3 _b0049;
vec3 _TMP50;
vec3 _a0051;
vec3 _TMP80;
varying vec4 TEX0;
 
uniform int FrameDirection;
uniform int FrameCount;
#ifdef GL_ES
uniform mediump vec2 OutputSize;
uniform mediump vec2 TextureSize;
uniform mediump vec2 InputSize;
#else
uniform vec2 OutputSize;
uniform vec2 TextureSize;
uniform vec2 InputSize;
#endif
void main()
{
    vec2 _fp;
    vec3 _B;
    vec3 _D;
    vec3 _E;
    vec3 _F;
    vec3 _H;
    vec3 _D0;
    vec3 _F4;
    vec3 _n1;
    vec3 _n2;
    vec3 _n3;
    vec3 _n4;
    vec3 _s;
    vec3 _aa;
    vec3 _bb;
    vec3 _cc;
    vec3 _dd;
    vec3 _t;
    vec3 _m;
    vec3 _res;
    vec3 _color;
    float _ddy;
    float _v_weight_00;
    vec3 _coords10;
    vec3 _colorNB;
    float _v_weight_10;
    _x0023 = TEX0.xy*TextureSize;
    _fp = fract(_x0023);
    _TMP1 = texture2D(Texture, VARt2.yw);
    _B = vec3(float(_TMP1.x), float(_TMP1.y), float(_TMP1.z));
    _TMP2 = texture2D(Texture, VARt3.xw);
    _D = vec3(float(_TMP2.x), float(_TMP2.y), float(_TMP2.z));
    _TMP3 = texture2D(Texture, VARt3.yw);
    _E = vec3(float(_TMP3.x), float(_TMP3.y), float(_TMP3.z));
    _TMP4 = texture2D(Texture, VARt3.zw);
    _F = vec3(float(_TMP4.x), float(_TMP4.y), float(_TMP4.z));
    _TMP5 = texture2D(Texture, VARt4.yw);
    _H = vec3(float(_TMP5.x), float(_TMP5.y), float(_TMP5.z));
    _TMP7 = texture2D(Texture, VARt6.xz);
    _D0 = vec3(float(_TMP7.x), float(_TMP7.y), float(_TMP7.z));
    _TMP8 = texture2D(Texture, VARt7.xz);
    _F4 = vec3(float(_TMP8.x), float(_TMP8.y), float(_TMP8.z));
    _n1 = vec3(float(_D0.x), float(_D0.y), float(_D0.z));
    _n2 = vec3(float(_D.x), float(_D.y), float(_D.z));
    _s = vec3(float(_E.x), float(_E.y), float(_E.z));
    _n3 = vec3(float(_F.x), float(_F.y), float(_F.z));
    _n4 = vec3(float(_F4.x), float(_F4.y), float(_F4.z));
    _aa = _n2 - _n1;
    _bb = _s - _n2;
    _cc = _n3 - _s;
    _dd = _n4 - _n3;
    _t = (7.00000000E+00*(_bb + _cc) - 3.00000000E+00*(_aa + _dd))/1.60000000E+01;
    _m = vec3(_s.x < 5.00000000E-01 ? (2.00000000E+00*_s).x : (2.00000000E+00*(1.00000000E+00 - _s)).x, _s.y < 5.00000000E-01 ? (2.00000000E+00*_s).y : (2.00000000E+00*(1.00000000E+00 - _s)).y, _s.z < 5.00000000E-01 ? (2.00000000E+00*_s).z : (2.00000000E+00*(1.00000000E+00 - _s)).z);
    _TMP9 = abs(_bb);
    _b0045 = 2.00000000E+00*_TMP9 + 9.99999978E-03;
    _m = min(_m, _b0045);
    _TMP10 = abs(_cc);
    _b0049 = 2.00000000E+00*_TMP10 + 9.99999978E-03;
    _m = min(_m, _b0049);
    _a0051 = -_m;
    _TMP13 = min(_m, _t);
    _TMP50 = max(_a0051, _TMP13);
    _res = (2.00000000E+00*_fp.x - 1.00000000E+00)*_TMP50 + _s;
    _TMP14 = pow(_res.x, 2.40000010E+00);
    _TMP15 = pow(_res.y, 2.40000010E+00);
    _TMP16 = pow(_res.z, 2.40000010E+00);
    _color = vec3(_TMP14, _TMP15, _TMP16);
    _ddy = _fp.y - 5.00000000E-01;
    _v_weight_00 = _ddy/6.00000024E-01;
    if (_v_weight_00 > 1.00000000E+00) { 
        _v_weight_00 = 1.00000000E+00;
    } 
    _v_weight_00 = 1.00000000E+00 - _v_weight_00*_v_weight_00;
    _v_weight_00 = _v_weight_00*_v_weight_00;
    _color = _color*vec3(_v_weight_00, _v_weight_00, _v_weight_00);
    if (_ddy > 0.00000000E+00) { 
        _coords10 = vec3(float(_H.x), float(_H.y), float(_H.z));
        _ddy = 1.00000000E+00 - _ddy;
    } else {
        _coords10 = vec3(float(_B.x), float(_B.y), float(_B.z));
        _ddy = 1.00000000E+00 + _ddy;
    } 
    _TMP14 = pow(_coords10.x, 2.40000010E+00);
    _TMP15 = pow(_coords10.y, 2.40000010E+00);
    _TMP16 = pow(_coords10.z, 2.40000010E+00);
    _colorNB = vec3(_TMP14, _TMP15, _TMP16);
    _v_weight_10 = _ddy/6.00000024E-01;
    if (_v_weight_10 > 1.00000000E+00) { 
        _v_weight_10 = 1.00000000E+00;
    } 
    _v_weight_10 = 1.00000000E+00 - _v_weight_10*_v_weight_10;
    _v_weight_10 = _v_weight_10*_v_weight_10;
    _color = _color + _colorNB*vec3(_v_weight_10, _v_weight_10, _v_weight_10);
    _color = _color*vec3( 1.39999998E+00, 1.39999998E+00, 1.39999998E+00);
    _TMP14 = pow(_color.x, 4.54545438E-01);
    _TMP15 = pow(_color.y, 4.54545438E-01);
    _TMP16 = pow(_color.z, 4.54545438E-01);
    _TMP11 = vec3(_TMP14, _TMP15, _TMP16);
    _TMP17 = min(vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _TMP11);
    _TMP80 = max(vec3( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP17);
    _ret_0 = vec4(_TMP80.x, _TMP80.y, _TMP80.z, 1.00000000E+00);
    gl_FragColor = _ret_0;
    return;
} 
#endif
