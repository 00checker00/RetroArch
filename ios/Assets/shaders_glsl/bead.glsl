// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)
varying     float _frame_rotation;
varying     vec2 _pixel_no;
varying     vec2 _c11;
struct tex_coord {
    vec2 _c11;
    vec2 _pixel_no;
};
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
vec4 _oPosition1;
uniform mat4 MVPMatrix;
input_dummy _IN1;
vec4 _r0005;
attribute vec4 VertexCoord;
attribute vec4 COLOR;
varying vec4 COL0;
attribute vec4 TexCoord;
varying vec4 TEX1;
varying vec4 TEX2;
 

         mat4 transpose_(mat4 matrix)
         {
            mat4 ret;
            for (int i = 0; i < 4; i++)
               for (int j = 0; j < 4; j++)
                  ret[i][j] = matrix[j][i];

            return ret;
         }
         
uniform int FrameDirection;
uniform int FrameCount;
#ifdef GL_ES
uniform mediump vec2 OutputSize;
uniform mediump vec2 TextureSize;
uniform mediump vec2 InputSize;
#else
uniform vec2 OutputSize;
uniform vec2 TextureSize;
uniform vec2 InputSize;
#endif
void main()
{
    mat4 MVPMatrix_ = transpose_(MVPMatrix);
    vec4 _oColor;
    tex_coord _coords;
    _r0005.x = dot(MVPMatrix_[0], VertexCoord);
    _r0005.y = dot(MVPMatrix_[1], VertexCoord);
    _r0005.z = dot(MVPMatrix_[2], VertexCoord);
    _r0005.w = dot(MVPMatrix_[3], VertexCoord);
    _oPosition1 = _r0005;
    _oColor = COLOR;
    _coords._c11 = TexCoord.xy;
    _coords._pixel_no = TexCoord.xy*TextureSize;
    gl_Position = _r0005;
    COL0 = COLOR;
    TEX1.xy = TexCoord.xy;
    TEX2.xy = _coords._pixel_no;
} 
#elif defined(FRAGMENT)
#ifdef GL_ES
precision mediump float;
#endif
varying     float _frame_rotation;
varying     vec2 _pixel_no1;
varying     vec2 _c11;
struct tex_coord {
    vec2 _c11;
    vec2 _pixel_no1;
};
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
vec4 _ret_0;
vec4 _TMP0;
vec2 _TMP1;
float _TMP4;
float _TMP5;
uniform sampler2D Texture;
vec3 _TMP12;
float _TMP16;
vec2 _delta0017;
float _len0025;
float _TMP26;
float _x0027;
float _len0031;
float _TMP32;
float _x0033;
varying vec4 TEX1;
varying vec4 TEX2;
 
uniform int FrameDirection;
uniform int FrameCount;
#ifdef GL_ES
uniform mediump vec2 OutputSize;
uniform mediump vec2 TextureSize;
uniform mediump vec2 InputSize;
#else
uniform vec2 OutputSize;
uniform vec2 TextureSize;
uniform vec2 InputSize;
#endif
void main()
{
    _TMP0 = texture2D(Texture, TEX1.xy);
    _TMP1 = fract(TEX2.xy);
    _delta0017 = _TMP1 - vec2( 5.00000000E-01, 5.00000000E-01);
    _TMP4 = dot(_delta0017, _delta0017);
    _TMP5 = inversesqrt(_TMP4);
    _TMP16 = 1.00000000E+00/_TMP5;
    if (_TMP16 > 2.00000003E-01 && _TMP16 < 3.49999994E-01) { 
        _TMP12 = _TMP0.xyz;
    } else {
        if (_TMP16 >= 3.49999994E-01) { 
            _len0025 = _TMP16 - 3.49999994E-01;
            _x0027 = -6.00000000E+00*_len0025;
            _TMP26 = pow(2.71828198E+00, _x0027);
            _TMP12 = _TMP0.xyz*_TMP26;
        } else {
            if (_TMP16 <= 2.00000003E-01) { 
                _len0031 = 2.00000003E-01 - _TMP16;
                _x0033 = -6.00000000E+00*_len0031;
                _TMP32 = pow(2.71828198E+00, _x0033);
                _TMP12 = _TMP0.xyz*_TMP32;
            } else {
                _TMP12 = vec3( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00);
            } 
        } 
    } 
    _ret_0 = vec4(_TMP12.x, _TMP12.y, _TMP12.z, 1.00000000E+00);
    gl_FragColor = _ret_0;
    return;
} 
#endif
