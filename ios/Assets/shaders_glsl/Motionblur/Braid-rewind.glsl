// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)
varying     vec4 _col;
varying     vec2 VARprev6;
varying     vec2 VARprev5;
varying     vec2 VARprev4;
varying     vec2 VARprev3;
varying     vec2 VARprev2;
varying     vec2 VARprev1;
varying     vec2 VARprev;
varying     vec2 VARtex;
varying     float _frame_rotation;
varying     vec2 VARtex_coord;
struct previous {
float _placeholder61;
    vec2 VARtex_coord;
};
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
float _placeholder72;
};
struct tex_coords {
    vec2 VARtex;
    vec2 VARprev;
    vec2 VARprev1;
    vec2 VARprev2;
    vec2 VARprev3;
    vec2 VARprev4;
    vec2 VARprev5;
    vec2 VARprev6;
};
struct output_dummy {
    vec4 _col;
};
vec4 _oPosition1;
tex_coords _coords1;
uniform mat4 MVPMatrix;
previous _PREV7;
previous _PREV11;
previous _PREV21;
previous _PREV31;
previous _PREV41;
previous _PREV51;
previous _PREV61;
vec4 _r0010;
attribute vec4 VertexCoord;
attribute vec4 TexCoord;
 

         mat4 transpose_(mat4 matrix)
         {
            mat4 ret;
            for (int i = 0; i < 4; i++)
               for (int j = 0; j < 4; j++)
                  ret[i][j] = matrix[j][i];

            return ret;
         }
         
uniform int FrameDirection;
uniform int FrameCount;
#ifdef GL_ES
uniform mediump vec2 OutputSize;
uniform mediump vec2 TextureSize;
uniform mediump vec2 InputSize;
#else
uniform vec2 OutputSize;
uniform vec2 TextureSize;
uniform vec2 InputSize;
#endif
attribute vec2 Prev6TexCoord;
attribute vec2 Prev5TexCoord;
attribute vec2 Prev4TexCoord;
attribute vec2 Prev3TexCoord;
attribute vec2 Prev2TexCoord;
attribute vec2 Prev1TexCoord;
attribute vec2 PrevTexCoord;
void main()
{
    mat4 MVPMatrix_ = transpose_(MVPMatrix);
    _r0010.x = dot(MVPMatrix_[0], VertexCoord);
    _r0010.y = dot(MVPMatrix_[1], VertexCoord);
    _r0010.z = dot(MVPMatrix_[2], VertexCoord);
    _r0010.w = dot(MVPMatrix_[3], VertexCoord);
    _oPosition1 = _r0010;
    VARtex = TexCoord.xy;
    VARprev = PrevTexCoord;
    VARprev1 = Prev1TexCoord;
    VARprev2 = Prev2TexCoord;
    VARprev3 = Prev3TexCoord;
    VARprev4 = Prev4TexCoord;
    VARprev5 = Prev5TexCoord;
    VARprev6 = Prev6TexCoord;
    gl_Position = _r0010;
} 
#elif defined(FRAGMENT)
#ifdef GL_ES
precision mediump float;
#endif
varying     vec4 _col;
varying     vec2 _prev6;
varying     vec2 _prev5;
varying     vec2 _prev4;
varying     vec2 _prev3;
varying     vec2 _prev2;
varying     vec2 _prev1;
varying     vec2 _prev;
varying     vec2 _tex;
varying     float _frame_rotation;
varying     vec2 _tex_coord;
struct previous {
float _placeholder58;
    vec2 _tex_coord;
};
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
float _placeholder69;
};
struct tex_coords {
    vec2 _tex;
    vec2 _prev;
    vec2 _prev1;
    vec2 _prev2;
    vec2 _prev3;
    vec2 _prev4;
    vec2 _prev5;
    vec2 _prev6;
};
struct output_dummy {
    vec4 _col;
};
vec4 _TMP6;
vec4 _TMP5;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec4 _TMP0;
input_dummy _IN1;
previous _PREV7;
previous _PREV11;
previous _PREV21;
previous _PREV31;
previous _PREV41;
previous _PREV51;
previous _PREV61;
varying vec4 TEX0;
 
uniform sampler2D Texture;
uniform sampler2D Prev6Texture;
uniform sampler2D Prev5Texture;
uniform sampler2D Prev4Texture;
uniform sampler2D Prev3Texture;
uniform sampler2D Prev2Texture;
uniform sampler2D Prev1Texture;
uniform sampler2D PrevTexture;
uniform int FrameDirection;
uniform int FrameCount;
#ifdef GL_ES
uniform mediump vec2 OutputSize;
uniform mediump vec2 TextureSize;
uniform mediump vec2 InputSize;
#else
uniform vec2 OutputSize;
uniform vec2 TextureSize;
uniform vec2 InputSize;
#endif
void main()
{
    vec4 _color;
    vec4 _final;
    _color = texture2D(Prev6Texture, TEX0.xy);
    _TMP0 = texture2D(Prev5Texture, TEX0.xy);
    _color = _color + _TMP0;
    _TMP1 = texture2D(Prev4Texture, TEX0.xy);
    _color = _color + _TMP1;
    _TMP2 = texture2D(Prev3Texture, TEX0.xy);
    _color = _color + _TMP2;
    _TMP3 = texture2D(Prev2Texture, TEX0.xy);
    _color = _color + _TMP3;
    _TMP4 = texture2D(Prev1Texture, TEX0.xy);
    _color = _color + _TMP4;
    _TMP5 = texture2D(PrevTexture, TEX0.xy);
    _color = _color + _TMP5;
    _TMP6 = texture2D(Texture, TEX0.xy);
    _color = _color + _TMP6;
    _final = texture2D(Texture, TEX0.xy);
    if (FrameDirection < 0.00000000E+00) { 
        _final = (_final + (_color*vec4( 1.00000000E+00, 8.00000012E-01, 6.00000024E-01, 5.00000000E-01))/7.00000000E+00)/2.00000000E+00;
    } else {
        _final = texture2D(Texture, TEX0.xy);
    } 
    gl_FragColor = _final;
    return;
} 
#endif
