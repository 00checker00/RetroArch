// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)
varying     vec4 VARt7;
varying     vec4 VARt6;
varying     vec4 VARt5;
varying     vec4 VARt4;
varying     vec4 VARt3;
varying     vec4 VARt2;
varying     vec4 VARt1;
varying     vec2 _texCoord1;
varying     vec4 _color1;
varying     vec4 _position1;
varying     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct out_vertex {
    vec4 _position1;
    vec4 _color1;
    vec2 _texCoord1;
    vec4 VARt1;
    vec4 VARt2;
    vec4 VARt3;
    vec4 VARt4;
    vec4 VARt5;
    vec4 VARt6;
    vec4 VARt7;
};
out_vertex _ret_0;
float _TMP0;
uniform mat4 MVPMatrix;
input_dummy _IN1;
vec4 _r0004;
attribute vec4 VertexCoord;
attribute vec4 COLOR;
attribute vec4 TexCoord;
varying vec4 COL0;
varying vec4 TEX0;
 

         mat4 transpose_(mat4 matrix)
         {
            mat4 ret;
            for (int i = 0; i < 4; i++)
               for (int j = 0; j < 4; j++)
                  ret[i][j] = matrix[j][i];

            return ret;
         }
         
uniform int FrameDirection;
uniform int FrameCount;
#ifdef GL_ES
uniform mediump vec2 OutputSize;
uniform mediump vec2 TextureSize;
uniform mediump vec2 InputSize;
#else
uniform vec2 OutputSize;
uniform vec2 TextureSize;
uniform vec2 InputSize;
#endif
void main()
{
    mat4 MVPMatrix_ = transpose_(MVPMatrix);
    out_vertex _OUT;
    vec2 _ps;
    _TMP0 = dot(vec4(float(MVPMatrix_[0].x), float(MVPMatrix_[0].y), float(MVPMatrix_[0].z), float(MVPMatrix_[0].w)), vec4(float(VertexCoord.x), float(VertexCoord.y), float(VertexCoord.z), float(VertexCoord.w)));
    _r0004.x = float(_TMP0);
    _TMP0 = dot(vec4(float(MVPMatrix_[1].x), float(MVPMatrix_[1].y), float(MVPMatrix_[1].z), float(MVPMatrix_[1].w)), vec4(float(VertexCoord.x), float(VertexCoord.y), float(VertexCoord.z), float(VertexCoord.w)));
    _r0004.y = float(_TMP0);
    _TMP0 = dot(vec4(float(MVPMatrix_[2].x), float(MVPMatrix_[2].y), float(MVPMatrix_[2].z), float(MVPMatrix_[2].w)), vec4(float(VertexCoord.x), float(VertexCoord.y), float(VertexCoord.z), float(VertexCoord.w)));
    _r0004.z = float(_TMP0);
    _TMP0 = dot(vec4(float(MVPMatrix_[3].x), float(MVPMatrix_[3].y), float(MVPMatrix_[3].z), float(MVPMatrix_[3].w)), vec4(float(VertexCoord.x), float(VertexCoord.y), float(VertexCoord.z), float(VertexCoord.w)));
    _r0004.w = float(_TMP0);
    _ps = vec2(float((1.00000000E+00/TextureSize.x)), float((1.00000000E+00/TextureSize.y)));
    _OUT.VARt1 = TexCoord.xxxy + vec4(float(-_ps.x), 0.00000000E+00, float(_ps.x), float((-2.00000000E+00*_ps.y)));
    _OUT.VARt2 = TexCoord.xxxy + vec4(float(-_ps.x), 0.00000000E+00, float(_ps.x), float(-_ps.y));
    _OUT.VARt3 = TexCoord.xxxy + vec4(float(-_ps.x), 0.00000000E+00, float(_ps.x), 0.00000000E+00);
    _OUT.VARt4 = TexCoord.xxxy + vec4(float(-_ps.x), 0.00000000E+00, float(_ps.x), float(_ps.y));
    _OUT.VARt5 = TexCoord.xxxy + vec4(float(-_ps.x), 0.00000000E+00, float(_ps.x), float((2.00000000E+00*_ps.y)));
    _OUT.VARt6 = TexCoord.xyyy + vec4(float((-2.00000000E+00*_ps.x)), float(-_ps.y), 0.00000000E+00, float(_ps.y));
    _OUT.VARt7 = TexCoord.xyyy + vec4(float((2.00000000E+00*_ps.x)), float(-_ps.y), 0.00000000E+00, float(_ps.y));
    _ret_0._position1 = _r0004;
    _ret_0._color1 = COLOR;
    _ret_0._texCoord1 = TexCoord.xy;
    VARt1 = _OUT.VARt1;
    VARt2 = _OUT.VARt2;
    VARt3 = _OUT.VARt3;
    VARt4 = _OUT.VARt4;
    VARt5 = _OUT.VARt5;
    VARt6 = _OUT.VARt6;
    VARt7 = _OUT.VARt7;
    gl_Position = vec4(float(_r0004.x), float(_r0004.y), float(_r0004.z), float(_r0004.w));
    COL0 = COLOR;
    TEX0.xy = TexCoord.xy;
    return;
    COL0 = _ret_0._color1;
    TEX0.xy = _ret_0._texCoord1;
} 
#elif defined(FRAGMENT)
#ifdef GL_ES
precision mediump float;
#endif
varying     vec4 VARt7;
varying     vec4 VARt6;
varying     vec4 VARt5;
varying     vec4 VARt4;
varying     vec4 VARt3;
varying     vec4 VARt2;
varying     vec4 VARt1;
varying     vec2 _texCoord;
varying     vec4 _color;
varying     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct out_vertex {
    vec4 _color;
    vec2 _texCoord;
    vec4 VARt1;
    vec4 VARt2;
    vec4 VARt3;
    vec4 VARt4;
    vec4 VARt5;
    vec4 VARt6;
    vec4 VARt7;
};
vec4 _ret_0;
vec3 _TMP15;
vec3 _TMP17;
vec3 _TMP16;
vec3 _TMP18;
vec3 _TMP14;
vec3 _TMP13;
vec3 _TMP12;
vec3 _TMP11;
vec3 _TMP10;
vec3 _TMP9;
vec4 _TMP8;
vec4 _TMP7;
vec4 _TMP6;
vec4 _TMP5;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec4 _TMP0;
out_vertex _VAR1;
uniform sampler2D Texture;
input_dummy _IN1;
vec2 _x0024;
vec3 _b0046;
vec3 _b0050;
vec3 _TMP51;
vec3 _a0052;
vec3 _b0060;
vec3 _b0064;
vec3 _TMP65;
vec3 _a0066;
vec3 _b0074;
vec3 _b0078;
vec3 _TMP79;
vec3 _a0080;
varying vec4 TEX0;
 
uniform int FrameDirection;
uniform int FrameCount;
#ifdef GL_ES
uniform mediump vec2 OutputSize;
uniform mediump vec2 TextureSize;
uniform mediump vec2 InputSize;
#else
uniform vec2 OutputSize;
uniform vec2 TextureSize;
uniform vec2 InputSize;
#endif
void main()
{
    vec2 _fp;
    vec3 _n1;
    vec3 _n2;
    vec3 _n3;
    vec3 _n4;
    vec3 _s;
    vec3 _aa;
    vec3 _bb;
    vec3 _cc;
    vec3 _dd;
    vec3 _B1;
    vec3 _B;
    vec3 _D;
    vec3 _E;
    vec3 _F;
    vec3 _H;
    vec3 _H5;
    vec3 _D0;
    vec3 _F4;
    vec3 _t;
    vec3 _m;
    vec3 _s1;
    vec3 _s0;
    vec3 _E1;
    vec3 _E0;
    vec3 _E3;
    vec3 _E2;
    _x0024 = TEX0.xy*TextureSize;
    _fp = fract(_x0024);
    _TMP0 = texture2D(Texture, VARt1.yw);
    _B1 = vec3(float(_TMP0.x), float(_TMP0.y), float(_TMP0.z));
    _TMP1 = texture2D(Texture, VARt2.yw);
    _B = vec3(float(_TMP1.x), float(_TMP1.y), float(_TMP1.z));
    _TMP2 = texture2D(Texture, VARt3.xw);
    _D = vec3(float(_TMP2.x), float(_TMP2.y), float(_TMP2.z));
    _TMP3 = texture2D(Texture, VARt3.yw);
    _E = vec3(float(_TMP3.x), float(_TMP3.y), float(_TMP3.z));
    _TMP4 = texture2D(Texture, VARt3.zw);
    _F = vec3(float(_TMP4.x), float(_TMP4.y), float(_TMP4.z));
    _TMP5 = texture2D(Texture, VARt4.yw);
    _H = vec3(float(_TMP5.x), float(_TMP5.y), float(_TMP5.z));
    _TMP6 = texture2D(Texture, VARt5.yw);
    _H5 = vec3(float(_TMP6.x), float(_TMP6.y), float(_TMP6.z));
    _TMP7 = texture2D(Texture, VARt6.xz);
    _D0 = vec3(float(_TMP7.x), float(_TMP7.y), float(_TMP7.z));
    _TMP8 = texture2D(Texture, VARt7.xz);
    _F4 = vec3(float(_TMP8.x), float(_TMP8.y), float(_TMP8.z));
    _n1 = vec3(float(_B1.x), float(_B1.y), float(_B1.z));
    _n2 = vec3(float(_B.x), float(_B.y), float(_B.z));
    _s = vec3(float(_E.x), float(_E.y), float(_E.z));
    _n3 = vec3(float(_H.x), float(_H.y), float(_H.z));
    _n4 = vec3(float(_H5.x), float(_H5.y), float(_H5.z));
    _aa = _n2 - _n1;
    _bb = _s - _n2;
    _cc = _n3 - _s;
    _dd = _n4 - _n3;
    _t = (7.00000000E+00*(_bb + _cc) - 3.00000000E+00*(_aa + _dd))/1.60000000E+01;
    _m = vec3(_s.x < 5.00000000E-01 ? (2.00000000E+00*_s).x : (2.00000000E+00*(1.00000000E+00 - _s)).x, _s.y < 5.00000000E-01 ? (2.00000000E+00*_s).y : (2.00000000E+00*(1.00000000E+00 - _s)).y, _s.z < 5.00000000E-01 ? (2.00000000E+00*_s).z : (2.00000000E+00*(1.00000000E+00 - _s)).z);
    _TMP9 = abs(_bb);
    _b0046 = 2.00000000E+00*_TMP9;
    _m = min(_m, _b0046);
    _TMP10 = abs(_cc);
    _b0050 = 2.00000000E+00*_TMP10;
    _m = min(_m, _b0050);
    _a0052 = -_m;
    _TMP18 = min(_m, _t);
    _TMP51 = max(_a0052, _TMP18);
    _s1 = _s + _TMP51/2.00000000E+00;
    _s0 = _s1 - _TMP51;
    _n1 = vec3(float(_D0.x), float(_D0.y), float(_D0.z));
    _n2 = vec3(float(_D.x), float(_D.y), float(_D.z));
    _n3 = vec3(float(_F.x), float(_F.y), float(_F.z));
    _n4 = vec3(float(_F4.x), float(_F4.y), float(_F4.z));
    _aa = _n2 - _n1;
    _bb = _s0 - _n2;
    _cc = _n3 - _s0;
    _dd = _n4 - _n3;
    _t = (7.00000000E+00*(_bb + _cc) - 3.00000000E+00*(_aa + _dd))/1.60000000E+01;
    _m = vec3(_s0.x < 5.00000000E-01 ? (2.00000000E+00*_s0).x : (2.00000000E+00*(1.00000000E+00 - _s0)).x, _s0.y < 5.00000000E-01 ? (2.00000000E+00*_s0).y : (2.00000000E+00*(1.00000000E+00 - _s0)).y, _s0.z < 5.00000000E-01 ? (2.00000000E+00*_s0).z : (2.00000000E+00*(1.00000000E+00 - _s0)).z);
    _TMP11 = abs(_bb);
    _b0060 = 2.00000000E+00*_TMP11;
    _m = min(_m, _b0060);
    _TMP12 = abs(_cc);
    _b0064 = 2.00000000E+00*_TMP12;
    _m = min(_m, _b0064);
    _a0066 = -_m;
    _TMP18 = min(_m, _t);
    _TMP65 = max(_a0066, _TMP18);
    _E1 = _s0 + _TMP65/2.00000000E+00;
    _E0 = _E1 - _TMP65;
    _bb = _s1 - _n2;
    _cc = _n3 - _s1;
    _t = (7.00000000E+00*(_bb + _cc) - 3.00000000E+00*(_aa + _dd))/1.60000000E+01;
    _m = vec3(_s1.x < 5.00000000E-01 ? (2.00000000E+00*_s1).x : (2.00000000E+00*(1.00000000E+00 - _s1)).x, _s1.y < 5.00000000E-01 ? (2.00000000E+00*_s1).y : (2.00000000E+00*(1.00000000E+00 - _s1)).y, _s1.z < 5.00000000E-01 ? (2.00000000E+00*_s1).z : (2.00000000E+00*(1.00000000E+00 - _s1)).z);
    _TMP13 = abs(_bb);
    _b0074 = 2.00000000E+00*_TMP13;
    _m = min(_m, _b0074);
    _TMP14 = abs(_cc);
    _b0078 = 2.00000000E+00*_TMP14;
    _m = min(_m, _b0078);
    _a0080 = -_m;
    _TMP18 = min(_m, _t);
    _TMP79 = max(_a0080, _TMP18);
    _E3 = _s1 + _TMP79/2.00000000E+00;
    _E2 = _E3 - _TMP79;
    if (_fp.x < 5.00000000E-01) { 
        if (_fp.y < 5.00000000E-01) { 
            _TMP16 = _E0;
        } else {
            _TMP16 = _E2;
        } 
        _TMP15 = _TMP16;
    } else {
        if (_fp.y < 5.00000000E-01) { 
            _TMP17 = _E1;
        } else {
            _TMP17 = _E3;
        } 
        _TMP15 = _TMP17;
    } 
    _ret_0 = vec4(float(_TMP15.x), float(_TMP15.y), float(_TMP15.z), 1.00000000E+00);
    gl_FragColor = vec4(float(_ret_0.x), float(_ret_0.y), float(_ret_0.z), float(_ret_0.w));
    return;
} 
#endif
