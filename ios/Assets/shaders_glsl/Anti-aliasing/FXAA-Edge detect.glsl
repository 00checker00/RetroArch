// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)
varying     vec2 _M;
varying     vec2 _DR;
varying     vec2 _DL;
varying     vec2 _UR;
varying     vec2 _UL;
varying     vec4 _color;
varying     vec2 _texCoord1;
varying     vec4 _vpos1;
varying     vec4 _position1;
varying     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct VERTEX_OUTPUT {
    vec4 _position1;
    vec4 _vpos1;
    vec2 _texCoord1;
};
struct output_dummy {
    vec4 _color;
};
struct deltas {
    vec2 _UL;
    vec2 _UR;
    vec2 _DL;
    vec2 _DR;
    vec2 _M;
};
VERTEX_OUTPUT _ret_0;
uniform mat4 MVPMatrix;
vec4 _r0003;
attribute vec4 VertexCoord;
attribute vec4 TexCoord;
varying vec4 TEX1;
varying vec4 TEX0;
 

         mat4 transpose_(mat4 matrix)
         {
            mat4 ret;
            for (int i = 0; i < 4; i++)
               for (int j = 0; j < 4; j++)
                  ret[i][j] = matrix[j][i];

            return ret;
         }
         
uniform int FrameDirection;
uniform int FrameCount;
#ifdef GL_ES
uniform mediump vec2 OutputSize;
uniform mediump vec2 TextureSize;
uniform mediump vec2 InputSize;
#else
uniform vec2 OutputSize;
uniform vec2 TextureSize;
uniform vec2 InputSize;
#endif
void main()
{
    mat4 MVPMatrix_ = transpose_(MVPMatrix);
    _r0003.x = dot(MVPMatrix_[0], VertexCoord);
    _r0003.y = dot(MVPMatrix_[1], VertexCoord);
    _r0003.z = dot(MVPMatrix_[2], VertexCoord);
    _r0003.w = dot(MVPMatrix_[3], VertexCoord);
    _ret_0._position1 = _r0003;
    _ret_0._vpos1 = _r0003;
    _ret_0._texCoord1 = TexCoord.xy;
    gl_Position = _r0003;
    TEX1 = _r0003;
    TEX0.xy = TexCoord.xy;
    return;
    TEX1 = _ret_0._vpos1;
    TEX0.xy = _ret_0._texCoord1;
} 
#elif defined(FRAGMENT)
#ifdef GL_ES
precision mediump float;
#endif
varying     vec2 _M;
varying     vec2 _DR;
varying     vec2 _DL;
varying     vec2 _UR;
varying     vec2 _UL;
varying     vec4 _color;
varying     vec2 _texCoord;
varying     vec4 _vpos;
varying     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct VERTEX_OUTPUT {
    vec4 _vpos;
    vec2 _texCoord;
};
struct output_dummy {
    vec4 _color;
};
struct deltas {
    vec2 _UL;
    vec2 _UR;
    vec2 _DL;
    vec2 _DR;
    vec2 _M;
};
float _TMP12;
float _TMP11;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec4 _TMP0;
uniform sampler2D Texture;
input_dummy _IN1;
varying vec4 TEX0;
 
uniform int FrameDirection;
uniform int FrameCount;
#ifdef GL_ES
uniform mediump vec2 OutputSize;
uniform mediump vec2 TextureSize;
uniform mediump vec2 InputSize;
#else
uniform vec2 OutputSize;
uniform vec2 TextureSize;
uniform vec2 InputSize;
#endif
void main()
{
    output_dummy _OUT;
    vec2 _ps;
    float _lumaUL;
    float _lumaUR;
    float _lumaDL;
    float _lumaDR;
    vec2 _dir;
    deltas _TMP16;
    _ps = vec2(9.99899983E-01/TextureSize.x, 9.99899983E-01/TextureSize.y);
    _TMP16._UL = TEX0.xy + vec2(-_ps.x, -_ps.y);
    _TMP16._UR = TEX0.xy + vec2(_ps.x, -_ps.y);
    _TMP16._DL = TEX0.xy + vec2(-_ps.x, _ps.y);
    _TMP16._DR = TEX0.xy + vec2(_ps.x, _ps.y);
    _TMP0 = texture2D(Texture, _TMP16._UL);
    _TMP1 = texture2D(Texture, _TMP16._UR);
    _TMP2 = texture2D(Texture, _TMP16._DL);
    _TMP3 = texture2D(Texture, _TMP16._DR);
    _lumaUL = dot(_TMP0.xyz, vec3( 2.98999995E-01, 5.87000012E-01, 1.14000000E-01));
    _lumaUR = dot(_TMP1.xyz, vec3( 2.98999995E-01, 5.87000012E-01, 1.14000000E-01));
    _lumaDL = dot(_TMP2.xyz, vec3( 2.98999995E-01, 5.87000012E-01, 1.14000000E-01));
    _lumaDR = dot(_TMP3.xyz, vec3( 2.98999995E-01, 5.87000012E-01, 1.14000000E-01));
    _dir.x = -((_lumaUL + _lumaUR) - (_lumaDR + _lumaDL));
    _dir.y = (_lumaUR + _lumaDR) - (_lumaUL + _lumaDL);
    _TMP11 = abs(_dir.x);
    _TMP12 = abs(_dir.y);
    _OUT._color = vec4(_TMP11 + _TMP12, _TMP11 + _TMP12, _TMP11 + _TMP12, _TMP11 + _TMP12);
    gl_FragColor = _OUT._color;
    return;
} 
#endif
