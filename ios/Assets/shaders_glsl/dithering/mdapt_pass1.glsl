// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)
varying     vec2 _loc;
varying     vec4 _t1;
varying     vec2 _texCoord1;
varying     vec4 _position1;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec4 _position1;
    vec2 _texCoord1;
    vec4 _t1;
    vec2 _loc;
};
out_vertex _ret_0;
float _TMP0;
uniform mat4 MVPMatrix;
input_dummy _IN1;
vec4 _r0004;
attribute vec4 VertexCoord;
attribute vec4 TexCoord;
varying vec4 TEX0;
varying vec4 TEX1;
varying vec4 TEX2;
 

         mat4 transpose_(mat4 matrix)
         {
            mat4 ret;
            for (int i = 0; i < 4; i++)
               for (int j = 0; j < 4; j++)
                  ret[i][j] = matrix[j][i];

            return ret;
         }
         
uniform int FrameDirection;
uniform int FrameCount;
#ifdef GL_ES
uniform mediump vec2 OutputSize;
uniform mediump vec2 TextureSize;
uniform mediump vec2 InputSize;
#else
uniform vec2 OutputSize;
uniform vec2 TextureSize;
uniform vec2 InputSize;
#endif
void main()
{
    mat4 MVPMatrix_ = transpose_(MVPMatrix);
    out_vertex _OUT;
    vec2 _ps;
    _TMP0 = dot(vec4(float(MVPMatrix_[0].x), float(MVPMatrix_[0].y), float(MVPMatrix_[0].z), float(MVPMatrix_[0].w)), vec4(float(VertexCoord.x), float(VertexCoord.y), float(VertexCoord.z), float(VertexCoord.w)));
    _r0004.x = float(_TMP0);
    _TMP0 = dot(vec4(float(MVPMatrix_[1].x), float(MVPMatrix_[1].y), float(MVPMatrix_[1].z), float(MVPMatrix_[1].w)), vec4(float(VertexCoord.x), float(VertexCoord.y), float(VertexCoord.z), float(VertexCoord.w)));
    _r0004.y = float(_TMP0);
    _TMP0 = dot(vec4(float(MVPMatrix_[2].x), float(MVPMatrix_[2].y), float(MVPMatrix_[2].z), float(MVPMatrix_[2].w)), vec4(float(VertexCoord.x), float(VertexCoord.y), float(VertexCoord.z), float(VertexCoord.w)));
    _r0004.z = float(_TMP0);
    _TMP0 = dot(vec4(float(MVPMatrix_[3].x), float(MVPMatrix_[3].y), float(MVPMatrix_[3].z), float(MVPMatrix_[3].w)), vec4(float(VertexCoord.x), float(VertexCoord.y), float(VertexCoord.z), float(VertexCoord.w)));
    _r0004.w = float(_TMP0);
    _ps = vec2(float((1.00000000E+00/TextureSize.x)), float((1.00000000E+00/TextureSize.y)));
    _OUT._t1.xy = vec2(_ps.x, 0.00000000E+00);
    _OUT._t1.zw = vec2(0.00000000E+00, _ps.y);
    _OUT._loc = vec2(float((TexCoord.xy*TextureSize).x), float((TexCoord.xy*TextureSize).y));
    _ret_0._position1 = _r0004;
    _ret_0._texCoord1 = TexCoord.xy;
    _ret_0._t1 = _OUT._t1;
    _ret_0._loc = _OUT._loc;
    gl_Position = vec4(float(_r0004.x), float(_r0004.y), float(_r0004.z), float(_r0004.w));
    TEX0.xy = TexCoord.xy;
    TEX1 = _OUT._t1;
    TEX2.xy = _OUT._loc;
    return;
    TEX0.xy = _ret_0._texCoord1;
    TEX1 = _ret_0._t1;
    TEX2.xy = _ret_0._loc;
} 
#elif defined(FRAGMENT)
#ifdef GL_ES
precision mediump float;
#endif
varying     vec2 _loc;
varying     vec4 _t1;
varying     vec2 _texCoord;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec2 _texCoord;
    vec4 _t1;
    vec2 _loc;
};
vec4 _ret_0;
bool _TMP9;
bool _TMP8;
bool _TMP7;
float _TMP10;
bool _TMP6;
bool _TMP5;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec4 _TMP0;
uniform sampler2D Texture;
vec2 _val0016;
vec2 _c0020;
vec2 _c0022;
vec2 _c0024;
vec2 _c0026;
vec3 _df0036;
varying vec4 TEX0;
varying vec4 TEX1;
varying vec4 TEX2;
 
uniform int FrameDirection;
uniform int FrameCount;
#ifdef GL_ES
uniform mediump vec2 OutputSize;
uniform mediump vec2 TextureSize;
uniform mediump vec2 InputSize;
#else
uniform vec2 OutputSize;
uniform vec2 TextureSize;
uniform vec2 InputSize;
#endif
void main()
{
    vec2 _pos;
    vec2 _dir;
    vec2 _g1;
    float _tag;
    _pos = vec2(float(TEX2.x), float(TEX2.y));
    _val0016 = vec2(float((_pos.x > 0.00000000E+00)), float((_pos.y > 0.00000000E+00)));
    _dir = _val0016 - vec2(float((_pos.x < 0.00000000E+00)), float((_pos.y < 0.00000000E+00)));
    _g1 = _dir*vec2(float(TEX1.x), float(TEX1.y));
    _TMP0 = texture2D(Texture, TEX0.xy);
    _c0020 = TEX0.xy - _g1;
    _TMP1 = texture2D(Texture, _c0020);
    _c0022 = TEX0.xy - 2.00000000E+00*_g1;
    _TMP2 = texture2D(Texture, _c0022);
    _c0024 = TEX0.xy + _g1;
    _TMP3 = texture2D(Texture, _c0024);
    _c0026 = TEX0.xy + 2.00000000E+00*_g1;
    _TMP4 = texture2D(Texture, _c0026);
    _tag = 0.00000000E+00;
    _TMP5 = _TMP1.x == _TMP0.x && _TMP1.y == _TMP0.y && _TMP1.z == _TMP0.z;
    _TMP6 = _TMP0.x == _TMP3.x && _TMP0.y == _TMP3.y && _TMP0.z == _TMP3.z;
    if (!_TMP5 || !_TMP6) { 
        _TMP7 = _TMP2.x == _TMP0.x && _TMP2.y == _TMP0.y && _TMP2.z == _TMP0.z;
        _TMP8 = _TMP0.x == _TMP4.x && _TMP0.y == _TMP4.y && _TMP0.z == _TMP4.z;
        _df0036 = _TMP1.xyz - _TMP3.xyz;
        _TMP10 = dot(_df0036, _df0036);
        _TMP9 = _TMP10 <= 1.00000000E+00;
        if (_TMP7 && _TMP8 && _TMP9) { 
            _tag = 1.00000000E+00;
        } 
    } 
    _ret_0 = vec4(_TMP0.x, _TMP0.y, _TMP0.z, _tag);
    gl_FragColor = _ret_0;
    return;
} 
#endif
