// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)
varying     vec2 VARpix_no;
varying     vec2 VARtex;
struct data {
    vec2 VARtex;
    vec2 VARpix_no;
};
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
};
vec4 _oPosition1;
data _oData1;
uniform mat4 MVPMatrix;
input_dummy _IN1;
vec4 _r0004;
attribute vec4 VertexCoord;
attribute vec4 TexCoord;
 

         mat4 transpose_(mat4 matrix)
         {
            mat4 ret;
            for (int i = 0; i < 4; i++)
               for (int j = 0; j < 4; j++)
                  ret[i][j] = matrix[j][i];

            return ret;
         }
         
uniform int FrameDirection;
uniform int FrameCount;
#ifdef GL_ES
uniform mediump vec2 OutputSize;
uniform mediump vec2 TextureSize;
uniform mediump vec2 InputSize;
#else
uniform vec2 OutputSize;
uniform vec2 TextureSize;
uniform vec2 InputSize;
#endif
void main()
{
    mat4 MVPMatrix_ = transpose_(MVPMatrix);
    _r0004.x = dot(MVPMatrix_[0], VertexCoord);
    _r0004.y = dot(MVPMatrix_[1], VertexCoord);
    _r0004.z = dot(MVPMatrix_[2], VertexCoord);
    _r0004.w = dot(MVPMatrix_[3], VertexCoord);
    _oPosition1 = _r0004;
    VARtex = TexCoord.xy;
    VARpix_no = TexCoord.xy*TextureSize;
    gl_Position = _r0004;
} 
#elif defined(FRAGMENT)
#ifdef GL_ES
precision mediump float;
#endif
varying     vec2 VARpix_no;
varying     vec2 VARtex;
struct data {
    vec2 VARtex;
    vec2 VARpix_no;
};
struct input_dummy {
    vec2 _video_size;
    vec2 VARtexture_size;
    vec2 _output_dummy_size;
    float _frame_count;
};
vec4 _ret_0;
float _TMP9;
float _TMP8;
float _TMP7;
vec4 _TMP6;
float _TMP5;
float _TMP3;
vec4 _TMP4;
vec4 _TMP2;
float _TMP1;
float _TMP10;
input_dummy _IN1;
data _vertex1;
uniform sampler2D Texture;
float _x0019;
vec2 _c0021;
vec2 _c0025;
 
uniform int FrameDirection;
uniform int FrameCount;
#ifdef GL_ES
uniform mediump vec2 OutputSize;
uniform mediump vec2 TextureSize;
uniform mediump vec2 InputSize;
#else
uniform vec2 OutputSize;
uniform vec2 TextureSize;
uniform vec2 InputSize;
#endif
void main()
{
    float _one_x;
    float _chroma_phase;
    float _mod_phase;
    float _signal;
    float _sums1;
    float _i_mod;
    float _q_mod;
    vec3 _out_color;
    _one_x = 1.00000000E+00/TextureSize.x;
    _x0019 = VARpix_no.y/3.00000000E+00;
    _TMP10 = floor(_x0019);
    _TMP1 = VARpix_no.y - 3.00000000E+00*_TMP10;
    _chroma_phase = 3.14159274E+00*(6.66700006E-01*_TMP1 + float(FrameCount));
    _mod_phase = _chroma_phase + VARpix_no.x*1.04709280E+00;
    _c0021 = VARtex + vec2(-1.40000000E+01*_one_x, 0.00000000E+00);
    _TMP2 = texture2D(Texture, _c0021);
    _TMP3 = dot(_TMP2.xyz, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _c0025 = VARtex + vec2(1.40000000E+01*_one_x, 0.00000000E+00);
    _TMP4 = texture2D(Texture, _c0025);
    _TMP5 = dot(_TMP4.xyz, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _sums1 = _TMP3 + _TMP5;
    _signal = _sums1*5.00000024E-04;
    _c0021 = VARtex + vec2(-1.30000000E+01*_one_x, 0.00000000E+00);
    _TMP2 = texture2D(Texture, _c0021);
    _TMP3 = dot(_TMP2.xyz, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _c0025 = VARtex + vec2(1.30000000E+01*_one_x, 0.00000000E+00);
    _TMP4 = texture2D(Texture, _c0025);
    _TMP5 = dot(_TMP4.xyz, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _sums1 = _TMP3 + _TMP5;
    _signal = _signal + _sums1*-6.99999975E-04;
    _c0021 = VARtex + vec2(-1.20000000E+01*_one_x, 0.00000000E+00);
    _TMP2 = texture2D(Texture, _c0021);
    _TMP3 = dot(_TMP2.xyz, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _c0025 = VARtex + vec2(1.20000000E+01*_one_x, 0.00000000E+00);
    _TMP4 = texture2D(Texture, _c0025);
    _TMP5 = dot(_TMP4.xyz, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _sums1 = _TMP3 + _TMP5;
    _signal = _signal + _sums1*-1.30000000E-03;
    _c0021 = VARtex + vec2(-1.10000000E+01*_one_x, 0.00000000E+00);
    _TMP2 = texture2D(Texture, _c0021);
    _TMP3 = dot(_TMP2.xyz, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _c0025 = VARtex + vec2(1.10000000E+01*_one_x, 0.00000000E+00);
    _TMP4 = texture2D(Texture, _c0025);
    _TMP5 = dot(_TMP4.xyz, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _sums1 = _TMP3 + _TMP5;
    _signal = _signal + _sums1*3.59999994E-03;
    _c0021 = VARtex + vec2(-9.00000000E+00*_one_x, 0.00000000E+00);
    _TMP2 = texture2D(Texture, _c0021);
    _TMP3 = dot(_TMP2.xyz, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _c0025 = VARtex + vec2(9.00000000E+00*_one_x, 0.00000000E+00);
    _TMP4 = texture2D(Texture, _c0025);
    _TMP5 = dot(_TMP4.xyz, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _sums1 = _TMP3 + _TMP5;
    _signal = _signal + _sums1*-9.30000003E-03;
    _c0021 = VARtex + vec2(-8.00000000E+00*_one_x, 0.00000000E+00);
    _TMP2 = texture2D(Texture, _c0021);
    _TMP3 = dot(_TMP2.xyz, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _c0025 = VARtex + vec2(8.00000000E+00*_one_x, 0.00000000E+00);
    _TMP4 = texture2D(Texture, _c0025);
    _TMP5 = dot(_TMP4.xyz, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _sums1 = _TMP3 + _TMP5;
    _signal = _signal + _sums1*8.60000029E-03;
    _c0021 = VARtex + vec2(-7.00000000E+00*_one_x, 0.00000000E+00);
    _TMP2 = texture2D(Texture, _c0021);
    _TMP3 = dot(_TMP2.xyz, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _c0025 = VARtex + vec2(7.00000000E+00*_one_x, 0.00000000E+00);
    _TMP4 = texture2D(Texture, _c0025);
    _TMP5 = dot(_TMP4.xyz, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _sums1 = _TMP3 + _TMP5;
    _signal = _signal + _sums1*1.26000000E-02;
    _c0021 = VARtex + vec2(-6.00000000E+00*_one_x, 0.00000000E+00);
    _TMP2 = texture2D(Texture, _c0021);
    _TMP3 = dot(_TMP2.xyz, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _c0025 = VARtex + vec2(6.00000000E+00*_one_x, 0.00000000E+00);
    _TMP4 = texture2D(Texture, _c0025);
    _TMP5 = dot(_TMP4.xyz, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _sums1 = _TMP3 + _TMP5;
    _signal = _signal + _sums1*-2.93000005E-02;
    _c0021 = VARtex + vec2(-4.00000000E+00*_one_x, 0.00000000E+00);
    _TMP2 = texture2D(Texture, _c0021);
    _TMP3 = dot(_TMP2.xyz, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _c0025 = VARtex + vec2(4.00000000E+00*_one_x, 0.00000000E+00);
    _TMP4 = texture2D(Texture, _c0025);
    _TMP5 = dot(_TMP4.xyz, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _sums1 = _TMP3 + _TMP5;
    _signal = _signal + _sums1*5.97000010E-02;
    _c0021 = VARtex + vec2(-3.00000000E+00*_one_x, 0.00000000E+00);
    _TMP2 = texture2D(Texture, _c0021);
    _TMP3 = dot(_TMP2.xyz, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _c0025 = VARtex + vec2(3.00000000E+00*_one_x, 0.00000000E+00);
    _TMP4 = texture2D(Texture, _c0025);
    _TMP5 = dot(_TMP4.xyz, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _sums1 = _TMP3 + _TMP5;
    _signal = _signal + _sums1*-5.46000004E-02;
    _c0021 = VARtex + vec2(-2.00000000E+00*_one_x, 0.00000000E+00);
    _TMP2 = texture2D(Texture, _c0021);
    _TMP3 = dot(_TMP2.xyz, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _c0025 = VARtex + vec2(2.00000000E+00*_one_x, 0.00000000E+00);
    _TMP4 = texture2D(Texture, _c0025);
    _TMP5 = dot(_TMP4.xyz, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _sums1 = _TMP3 + _TMP5;
    _signal = _signal + _sums1*-8.82000029E-02;
    _c0021 = VARtex + vec2(-_one_x, 0.00000000E+00);
    _TMP2 = texture2D(Texture, _c0021);
    _TMP3 = dot(_TMP2.xyz, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _c0025 = VARtex + vec2(_one_x, 0.00000000E+00);
    _TMP4 = texture2D(Texture, _c0025);
    _TMP5 = dot(_TMP4.xyz, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _sums1 = _TMP3 + _TMP5;
    _signal = _signal + _sums1*2.98299998E-01;
    _TMP6 = texture2D(Texture, VARtex);
    _TMP7 = dot(_TMP6.xyz, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _signal = _signal + _TMP7*6.00000024E-01;
    _TMP8 = cos(_mod_phase);
    _i_mod = 2.00000000E+00*_TMP8;
    _TMP9 = sin(_mod_phase);
    _q_mod = 2.00000000E+00*_TMP9;
    _out_color = vec3(_signal, _signal, _signal)*vec3(1.00000000E+00, _i_mod, _q_mod);
    _ret_0 = vec4(_out_color.x, _out_color.y, _out_color.z, 1.00000000E+00);
    gl_FragColor = _ret_0;
    return;
} 
#endif
