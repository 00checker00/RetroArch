// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)
varying     vec4 _t4;
varying     vec4 _t3;
varying     vec4 _t2;
varying     vec4 _t1;
varying     vec2 _texCoord1;
varying     vec4 _color1;
varying     vec4 _position1;
varying     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct out_vertex {
    vec4 _position1;
    vec4 _color1;
    vec2 _texCoord1;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
};
out_vertex _ret_0;
uniform mat4 MVPMatrix;
input_dummy _IN1;
vec4 _r0003;
attribute vec4 VertexCoord;
attribute vec4 COLOR;
attribute vec4 TexCoord;
varying vec4 COL0;
varying vec4 TEX0;
varying vec4 TEX1;
varying vec4 TEX2;
varying vec4 TEX3;
varying vec4 TEX4;
 

         mat4 transpose_(mat4 matrix)
         {
            mat4 ret;
            for (int i = 0; i < 4; i++)
               for (int j = 0; j < 4; j++)
                  ret[i][j] = matrix[j][i];

            return ret;
         }
         
uniform int FrameDirection;
uniform int FrameCount;
#ifdef GL_ES
uniform mediump vec2 OutputSize;
uniform mediump vec2 TextureSize;
uniform mediump vec2 InputSize;
#else
uniform vec2 OutputSize;
uniform vec2 TextureSize;
uniform vec2 InputSize;
#endif
void main()
{
    mat4 MVPMatrix_ = transpose_(MVPMatrix);
    out_vertex _OUT;
    vec2 _ps;
    _r0003.x = dot(MVPMatrix_[0], VertexCoord);
    _r0003.y = dot(MVPMatrix_[1], VertexCoord);
    _r0003.z = dot(MVPMatrix_[2], VertexCoord);
    _r0003.w = dot(MVPMatrix_[3], VertexCoord);
    _ps = vec2(1.00000000E+00/TextureSize.x, 1.00000000E+00/TextureSize.y);
    _OUT._t1.xy = TexCoord.xy + vec2(-_ps.x, 0.00000000E+00);
    _OUT._t2.xy = TexCoord.xy + vec2(_ps.x, 0.00000000E+00);
    _OUT._t3.xy = TexCoord.xy + vec2(0.00000000E+00, -_ps.y);
    _OUT._t4.xy = TexCoord.xy + vec2(0.00000000E+00, _ps.y);
    _OUT._t1.zw = TexCoord.xy + vec2(-_ps.x, -_ps.y);
    _OUT._t2.zw = TexCoord.xy + vec2(-_ps.x, _ps.y);
    _OUT._t3.zw = TexCoord.xy + vec2(_ps.x, -_ps.y);
    _OUT._t4.zw = TexCoord.xy + vec2(_ps.x, _ps.y);
    _ret_0._position1 = _r0003;
    _ret_0._color1 = COLOR;
    _ret_0._texCoord1 = TexCoord.xy;
    _ret_0._t1 = _OUT._t1;
    _ret_0._t2 = _OUT._t2;
    _ret_0._t3 = _OUT._t3;
    _ret_0._t4 = _OUT._t4;
    gl_Position = _r0003;
    COL0 = COLOR;
    TEX0.xy = TexCoord.xy;
    TEX1 = _OUT._t1;
    TEX2 = _OUT._t2;
    TEX3 = _OUT._t3;
    TEX4 = _OUT._t4;
    return;
    COL0 = _ret_0._color1;
    TEX0.xy = _ret_0._texCoord1;
    TEX1 = _ret_0._t1;
    TEX2 = _ret_0._t2;
    TEX3 = _ret_0._t3;
    TEX4 = _ret_0._t4;
} 
#elif defined(FRAGMENT)
#ifdef GL_ES
precision mediump float;
#endif
varying     vec4 _t4;
varying     vec4 _t3;
varying     vec4 _t2;
varying     vec4 _t1;
varying     vec2 _texCoord;
varying     vec4 _color1;
varying     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct out_vertex {
    vec4 _color1;
    vec2 _texCoord;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
};
vec4 _ret_0;
float _TMP9;
float _TMP10;
vec4 _TMP8;
vec4 _TMP7;
vec4 _TMP6;
vec4 _TMP5;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec4 _TMP0;
uniform sampler2D Texture;
input_dummy _IN1;
vec2 _x0016;
varying vec4 TEX0;
varying vec4 TEX1;
varying vec4 TEX2;
varying vec4 TEX3;
varying vec4 TEX4;
 
uniform int FrameDirection;
uniform int FrameCount;
#ifdef GL_ES
uniform mediump vec2 OutputSize;
uniform mediump vec2 TextureSize;
uniform mediump vec2 InputSize;
#else
uniform vec2 OutputSize;
uniform vec2 TextureSize;
uniform vec2 InputSize;
#endif
void main()
{
    vec2 _fp;
    vec3 _A;
    vec3 _B;
    vec3 _C;
    vec3 _D;
    vec3 _E;
    vec3 _F;
    vec3 _G;
    vec3 _H;
    vec3 _I;
    float _a;
    float _b;
    float _c;
    float _d;
    float _e;
    float _f;
    float _g;
    float _h;
    float _i;
    vec3 _res;
    _x0016 = TEX0.xy*TextureSize;
    _fp = fract(_x0016);
    _TMP0 = texture2D(Texture, TEX1.zw);
    _A = vec3(float(_TMP0.x), float(_TMP0.y), float(_TMP0.z));
    _TMP1 = texture2D(Texture, TEX3.xy);
    _B = vec3(float(_TMP1.x), float(_TMP1.y), float(_TMP1.z));
    _TMP2 = texture2D(Texture, TEX3.zw);
    _C = vec3(float(_TMP2.x), float(_TMP2.y), float(_TMP2.z));
    _TMP3 = texture2D(Texture, TEX1.xy);
    _D = vec3(float(_TMP3.x), float(_TMP3.y), float(_TMP3.z));
    _TMP4 = texture2D(Texture, TEX0.xy);
    _E = vec3(float(_TMP4.x), float(_TMP4.y), float(_TMP4.z));
    _TMP5 = texture2D(Texture, TEX2.xy);
    _F = vec3(float(_TMP5.x), float(_TMP5.y), float(_TMP5.z));
    _TMP6 = texture2D(Texture, TEX2.zw);
    _G = vec3(float(_TMP6.x), float(_TMP6.y), float(_TMP6.z));
    _TMP7 = texture2D(Texture, TEX4.xy);
    _H = vec3(float(_TMP7.x), float(_TMP7.y), float(_TMP7.z));
    _TMP8 = texture2D(Texture, TEX4.zw);
    _I = vec3(float(_TMP8.x), float(_TMP8.y), float(_TMP8.z));
    _TMP10 = dot(vec3(float(_A.x), float(_A.y), float(_A.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP9 = float(_TMP10);
    _a = float(_TMP9);
    _TMP10 = dot(vec3(float(_B.x), float(_B.y), float(_B.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP9 = float(_TMP10);
    _b = float(_TMP9);
    _TMP10 = dot(vec3(float(_C.x), float(_C.y), float(_C.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP9 = float(_TMP10);
    _c = float(_TMP9);
    _TMP10 = dot(vec3(float(_D.x), float(_D.y), float(_D.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP9 = float(_TMP10);
    _d = float(_TMP9);
    _TMP10 = dot(vec3(float(_E.x), float(_E.y), float(_E.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP9 = float(_TMP10);
    _e = float(_TMP9);
    _TMP10 = dot(vec3(float(_F.x), float(_F.y), float(_F.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP9 = float(_TMP10);
    _f = float(_TMP9);
    _TMP10 = dot(vec3(float(_G.x), float(_G.y), float(_G.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP9 = float(_TMP10);
    _g = float(_TMP9);
    _TMP10 = dot(vec3(float(_H.x), float(_H.y), float(_H.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP9 = float(_TMP10);
    _h = float(_TMP9);
    _TMP10 = dot(vec3(float(_I.x), float(_I.y), float(_I.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP9 = float(_TMP10);
    _i = float(_TMP9);
    _res = vec3(float(_E.x), float(_E.y), float(_E.z));
    if (_e != _h && _h == _f && (_e != _i && (_e != _b || _e != _d || _f != _b && _f != _c || _h != _d && _h != _g) || _e == _g && (_i == _h || _e == _d || _h != _d) || _e == _c && (_i == _h || _e == _b || _f != _b))) { 
        if (_fp.y + _fp.x > 1.50000000E+00 || _e == _c && _e == _d && _h == _g && _fp.y + 5.00000000E-01*_fp.x > 1.00000000E+00 || _e == _g && _e == _b && _f == _c && _fp.y + 2.00000000E+00*_fp.x > 2.00000000E+00) { 
            _res = vec3(float(_H.x), float(_H.y), float(_H.z));
        } 
    } 
    if (_e != _f && _f == _b && (_e != _c && (_e != _d || _e != _h || _b != _d && _b != _a || _f != _h && _f != _i) || _e == _i && (_c == _f || _e == _h || _f != _h) || _e == _a && (_c == _f || _e == _d || _b != _d))) { 
        if (-_fp.y + _fp.x > 5.00000000E-01 || _e == _a && _e == _h && _f == _i && -_fp.y + 2.00000000E+00*_fp.x > 1.00000000E+00 || _e == _i && _e == _d && _b == _a && -_fp.y + 5.00000000E-01*_fp.x > 0.00000000E+00) { 
            _res = vec3(float(_F.x), float(_F.y), float(_F.z));
        } 
    } 
    if (_e != _b && _b == _d && (_e != _a && (_e != _h || _e != _f || _d != _h && _d != _g || _b != _f && _b != _c) || _e == _c && (_a == _b || _e == _f || _b != _f) || _e == _g && (_a == _b || _e == _h || _d != _h))) { 
        if (-_fp.y + -_fp.x > -5.00000000E-01 || _e == _g && _e == _f && _b == _c && -_fp.y + -5.00000000E-01*_fp.x > -5.00000000E-01 || _e == _c && _e == _h && _d == _g && -_fp.y + -2.00000000E+00*_fp.x > -1.00000000E+00) { 
            _res = vec3(float(_B.x), float(_B.y), float(_B.z));
        } 
    } 
    if (_e != _d && _d == _h && (_e != _g && (_e != _f || _e != _b || _h != _f && _h != _i || _d != _b && _d != _a) || _e == _a && (_g == _d || _e == _b || _d != _b) || _e == _i && (_g == _d || _e == _f || _h != _f))) { 
        if (_fp.y + -_fp.x > 5.00000000E-01 || _e == _i && _e == _b && _d == _a && _fp.y + -2.00000000E+00*_fp.x > 0.00000000E+00 || _e == _a && _e == _f && _h == _i && _fp.y + -5.00000000E-01*_fp.x > 5.00000000E-01) { 
            _res = vec3(float(_D.x), float(_D.y), float(_D.z));
        } 
    } 
    _ret_0 = vec4(_res.x, _res.y, _res.z, 1.00000000E+00);
    gl_FragColor = _ret_0;
    return;
} 
#endif
