// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)
varying     vec2 _upper_bound;
varying     vec2 _lower_bound;
varying     vec2 _texel1;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
float _placeholder32;
};
struct texture_info {
    vec2 _texel1;
    vec2 _lower_bound;
    vec2 _upper_bound;
};
vec4 _oPosition1;
texture_info _oTexInfo1;
uniform mat4 MVPMatrix;
input_dummy _IN1;
vec4 _r0004;
attribute vec4 VertexCoord;
attribute vec4 TexCoord;
varying vec4 TEX0;
varying vec4 TEX1;
varying vec4 TEX2;
varying vec4 TEX3;
 

         mat4 transpose_(mat4 matrix)
         {
            mat4 ret;
            for (int i = 0; i < 4; i++)
               for (int j = 0; j < 4; j++)
                  ret[i][j] = matrix[j][i];

            return ret;
         }
         
uniform int FrameDirection;
uniform int FrameCount;
#ifdef GL_ES
uniform mediump vec2 OutputSize;
uniform mediump vec2 TextureSize;
uniform mediump vec2 InputSize;
#else
uniform vec2 OutputSize;
uniform vec2 TextureSize;
uniform vec2 InputSize;
#endif
void main()
{
    mat4 MVPMatrix_ = transpose_(MVPMatrix);
    vec2 _oTexCoord;
    vec2 _texel;
    texture_info _TMP2;
    _r0004.x = dot(MVPMatrix_[0], VertexCoord);
    _r0004.y = dot(MVPMatrix_[1], VertexCoord);
    _r0004.z = dot(MVPMatrix_[2], VertexCoord);
    _r0004.w = dot(MVPMatrix_[3], VertexCoord);
    _oPosition1 = _r0004;
    _oTexCoord = TexCoord.xy;
    _texel = 1.00000000E+00/TextureSize;
    _TMP2._upper_bound = _texel*(OutputSize - 1.00000000E+00);
    _oTexInfo1._texel1 = _texel;
    _oTexInfo1._lower_bound = vec2( 0.00000000E+00, 0.00000000E+00);
    _oTexInfo1._upper_bound = _TMP2._upper_bound;
    gl_Position = _r0004;
    TEX0.xy = TexCoord.xy;
    TEX1.xy = _texel;
    TEX2.xy = vec2( 0.00000000E+00, 0.00000000E+00);
    TEX3.xy = _TMP2._upper_bound;
} 
#elif defined(FRAGMENT)
#ifdef GL_ES
precision mediump float;
#endif
varying     vec2 _upper_bound;
varying     vec2 _lower_bound;
varying     vec2 _texel;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
float _placeholder28;
};
struct texture_info {
    vec2 _texel;
    vec2 _lower_bound;
    vec2 _upper_bound;
};
vec4 _ret_0;
vec4 _TMP7;
vec2 _TMP8;
vec4 _TMP5;
vec4 _TMP3;
input_dummy _IN1;
vec4 _out_color0014;
vec2 _TMP15;
vec2 _TMP23;
vec2 _x0024;
vec2 _TMP31;
vec2 _x0032;
varying vec4 TEX0;
varying vec4 TEX1;
varying vec4 TEX2;
varying vec4 TEX3;
 
uniform sampler2D Texture;
uniform int FrameDirection;
uniform int FrameCount;
#ifdef GL_ES
uniform mediump vec2 OutputSize;
uniform mediump vec2 TextureSize;
uniform mediump vec2 InputSize;
#else
uniform vec2 OutputSize;
uniform vec2 TextureSize;
uniform vec2 InputSize;
#endif
void main()
{
    _TMP8 = min(TEX3.xy, TEX0.xy);
    _TMP15 = max(TEX2.xy, _TMP8);
    _TMP3 = texture2D(Texture, _TMP15);
    _out_color0014 = vec4(float((_TMP3*1.34765625E-01).x), float((_TMP3*1.34765625E-01).y), float((_TMP3*1.34765625E-01).z), float((_TMP3*1.34765625E-01).w));
    _x0024 = TEX0.xy + vec2(0.00000000E+00, float(float(TEX1.y)));
    _TMP8 = min(TEX3.xy, _x0024);
    _TMP23 = max(TEX2.xy, _TMP8);
    _TMP5 = texture2D(Texture, _TMP23);
    _out_color0014.w = float((float(_out_color0014.w) + _TMP5.w*1.30859375E-01));
    _x0032 = TEX0.xy - vec2(0.00000000E+00, float(float(TEX1.y)));
    _TMP8 = min(TEX3.xy, _x0032);
    _TMP31 = max(TEX2.xy, _TMP8);
    _TMP7 = texture2D(Texture, _TMP31);
    _out_color0014.w = float((float(_out_color0014.w) + _TMP7.w*1.30859375E-01));
    _x0024 = TEX0.xy + vec2(0.00000000E+00, float(float((2.00000000E+00*TEX1.y))));
    _TMP8 = min(TEX3.xy, _x0024);
    _TMP23 = max(TEX2.xy, _TMP8);
    _TMP5 = texture2D(Texture, _TMP23);
    _out_color0014.w = float((float(_out_color0014.w) + _TMP5.w*1.19140625E-01));
    _x0032 = TEX0.xy - vec2(0.00000000E+00, float(float((2.00000000E+00*TEX1.y))));
    _TMP8 = min(TEX3.xy, _x0032);
    _TMP31 = max(TEX2.xy, _TMP8);
    _TMP7 = texture2D(Texture, _TMP31);
    _out_color0014.w = float((float(_out_color0014.w) + _TMP7.w*1.19140625E-01));
    _x0024 = TEX0.xy + vec2(0.00000000E+00, float(float((3.00000000E+00*TEX1.y))));
    _TMP8 = min(TEX3.xy, _x0024);
    _TMP23 = max(TEX2.xy, _TMP8);
    _TMP5 = texture2D(Texture, _TMP23);
    _out_color0014.w = float((float(_out_color0014.w) + _TMP5.w*1.01562500E-01));
    _x0032 = TEX0.xy - vec2(0.00000000E+00, float(float((3.00000000E+00*TEX1.y))));
    _TMP8 = min(TEX3.xy, _x0032);
    _TMP31 = max(TEX2.xy, _TMP8);
    _TMP7 = texture2D(Texture, _TMP31);
    _out_color0014.w = float((float(_out_color0014.w) + _TMP7.w*1.01562500E-01));
    _x0024 = TEX0.xy + vec2(0.00000000E+00, float(float((4.00000000E+00*TEX1.y))));
    _TMP8 = min(TEX3.xy, _x0024);
    _TMP23 = max(TEX2.xy, _TMP8);
    _TMP5 = texture2D(Texture, _TMP23);
    _out_color0014.w = float((float(_out_color0014.w) + _TMP5.w*8.20312500E-02));
    _x0032 = TEX0.xy - vec2(0.00000000E+00, float(float((4.00000000E+00*TEX1.y))));
    _TMP8 = min(TEX3.xy, _x0032);
    _TMP31 = max(TEX2.xy, _TMP8);
    _TMP7 = texture2D(Texture, _TMP31);
    _out_color0014.w = float((float(_out_color0014.w) + _TMP7.w*8.20312500E-02));
    _ret_0 = vec4(float(_out_color0014.x), float(_out_color0014.y), float(_out_color0014.z), float(_out_color0014.w));
    gl_FragColor = _ret_0;
    return;
} 
#endif
