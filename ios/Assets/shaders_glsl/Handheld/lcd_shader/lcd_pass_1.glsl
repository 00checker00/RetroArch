// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)
varying     float _threeVARtwo_dX;
varying     float _twoVARtwo_dX;
varying     float VARtwo_dX;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
float _placeholder32;
};
struct texture_data {
    float VARtwo_dX;
    float _twoVARtwo_dX;
    float _threeVARtwo_dX;
};
vec4 _oPosition1;
texture_data _oTexData1;
uniform mat4 MVPMatrix;
input_dummy _IN1;
vec4 _r0004;
attribute vec4 VertexCoord;
attribute vec4 TexCoord;
varying vec4 TEX0;
varying vec4 TEX1;
varying vec4 TEX2;
varying vec4 TEX3;
 

         mat4 transpose_(mat4 matrix)
         {
            mat4 ret;
            for (int i = 0; i < 4; i++)
               for (int j = 0; j < 4; j++)
                  ret[i][j] = matrix[j][i];

            return ret;
         }
         
uniform int FrameDirection;
uniform int FrameCount;
#ifdef GL_ES
uniform mediump vec2 OutputSize;
uniform mediump vec2 TextureSize;
uniform mediump vec2 InputSize;
#else
uniform vec2 OutputSize;
uniform vec2 TextureSize;
uniform vec2 InputSize;
#endif
void main()
{
    mat4 MVPMatrix_ = transpose_(MVPMatrix);
    vec2 _oTexCoord;
    float _texel_width;
    texture_data _TMP2;
    _r0004.x = dot(MVPMatrix_[0], VertexCoord);
    _r0004.y = dot(MVPMatrix_[1], VertexCoord);
    _r0004.z = dot(MVPMatrix_[2], VertexCoord);
    _r0004.w = dot(MVPMatrix_[3], VertexCoord);
    _oPosition1 = _r0004;
    _oTexCoord = TexCoord.xy;
    _texel_width = 1.00000000E+00/TextureSize.x;
    _TMP2._twoVARtwo_dX = 2.00000000E+00*_texel_width;
    _TMP2._threeVARtwo_dX = 3.00000000E+00*_texel_width;
    _oTexData1.VARtwo_dX = _texel_width;
    _oTexData1._twoVARtwo_dX = _TMP2._twoVARtwo_dX;
    _oTexData1._threeVARtwo_dX = _TMP2._threeVARtwo_dX;
    gl_Position = _r0004;
    TEX0.xy = TexCoord.xy;
    TEX1.x = _texel_width;
    TEX2.x = _TMP2._twoVARtwo_dX;
    TEX3.x = _TMP2._threeVARtwo_dX;
} 
#elif defined(FRAGMENT)
#ifdef GL_ES
precision mediump float;
#endif
varying     float _threeVARtwo_dX;
varying     float _twoVARtwo_dX;
varying     float VARtwo_dX;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
float _placeholder28;
};
struct texture_data {
    float VARtwo_dX;
    float _twoVARtwo_dX;
    float _threeVARtwo_dX;
};
vec4 _ret_0;
float _TMP5;
float _TMP4;
float _TMP3;
float _TMP10;
vec4 _TMP2;
vec3 _TMP0;
vec3 _TMP1;
float _TMP9;
float _TMP8;
float _TMP7;
float _TMP6;
input_dummy _IN1;
float _c0014;
float _a0016;
varying vec4 TEX0;
varying vec4 TEX1;
varying vec4 TEX2;
varying vec4 TEX3;
 
uniform sampler2D Texture;
uniform int FrameDirection;
uniform int FrameCount;
#ifdef GL_ES
uniform mediump vec2 OutputSize;
uniform mediump vec2 TextureSize;
uniform mediump vec2 InputSize;
#else
uniform vec2 OutputSize;
uniform vec2 TextureSize;
uniform vec2 InputSize;
#endif
void main()
{
    vec4 _out_color;
    _a0016 = TEX0.x/TEX3.x;
    _TMP6 = abs(_a0016);
    _TMP7 = fract(_TMP6);
    _TMP8 = abs(TEX3.x);
    _c0014 = _TMP7*_TMP8;
    if (TEX0.x < 0.00000000E+00) { 
        _TMP9 = -_c0014;
    } else {
        _TMP9 = _c0014;
    } 
    if (_TMP9 < TEX1.x) { 
        _TMP0 = vec3( 1.00000000E+00, 0.00000000E+00, 1.00000000E+00);
    } else {
        if (_TMP9 < TEX2.x) { 
            _TMP1 = vec3( 1.00000000E+00, 1.00000000E+00, 0.00000000E+00);
        } else {
            _TMP1 = vec3( 0.00000000E+00, 1.00000000E+00, 1.00000000E+00);
        } 
        _TMP0 = _TMP1;
    } 
    _TMP2 = texture2D(Texture, TEX0.xy);
    _out_color = vec4(float(_TMP2.x), float(_TMP2.y), float(_TMP2.z), float(_TMP2.w));
    _TMP10 = min(float(_out_color.x), float(_TMP0.x));
    _TMP3 = float(_TMP10);
    _TMP10 = min(float(_out_color.y), float(_TMP0.y));
    _TMP4 = float(_TMP10);
    _TMP10 = min(float(_out_color.z), float(_TMP0.z));
    _TMP5 = float(_TMP10);
    _out_color.xyz = vec3(_TMP3, _TMP4, _TMP5);
    _ret_0 = vec4(float(_out_color.x), float(_out_color.y), float(_out_color.z), float(_out_color.w));
    gl_FragColor = _ret_0;
    return;
} 
#endif
