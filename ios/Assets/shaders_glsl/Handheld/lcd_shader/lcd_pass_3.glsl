// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)
varying     vec2 _upper_bound;
varying     vec2 _lower_bound;
varying     vec2 _tex_coord_2;
varying     vec2 _tex_coord_1;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
float _placeholder33;
};
struct pass_1 {
float _placeholder37;
};
struct blur_coords {
    vec2 _tex_coord_1;
    vec2 _tex_coord_2;
    vec2 _lower_bound;
    vec2 _upper_bound;
};
vec4 _oPosition1;
blur_coords _oBlurCoords1;
uniform mat4 MVPMatrix;
input_dummy _IN1;
vec4 _r0004;
attribute vec4 VertexCoord;
attribute vec4 TexCoord;
varying vec4 TEX0;
varying vec4 TEX1;
varying vec4 TEX2;
varying vec4 TEX3;
varying vec4 TEX4;
 

         mat4 transpose_(mat4 matrix)
         {
            mat4 ret;
            for (int i = 0; i < 4; i++)
               for (int j = 0; j < 4; j++)
                  ret[i][j] = matrix[j][i];

            return ret;
         }
         
uniform int FrameDirection;
uniform int FrameCount;
#ifdef GL_ES
uniform mediump vec2 OutputSize;
uniform mediump vec2 TextureSize;
uniform mediump vec2 InputSize;
#else
uniform vec2 OutputSize;
uniform vec2 TextureSize;
uniform vec2 InputSize;
#endif
void main()
{
    mat4 MVPMatrix_ = transpose_(MVPMatrix);
    vec2 _oTexCoord;
    vec2 _texel;
    blur_coords _TMP2;
    _r0004.x = dot(MVPMatrix_[0], VertexCoord);
    _r0004.y = dot(MVPMatrix_[1], VertexCoord);
    _r0004.z = dot(MVPMatrix_[2], VertexCoord);
    _r0004.w = dot(MVPMatrix_[3], VertexCoord);
    _oPosition1 = _r0004;
    _oTexCoord = TexCoord.xy;
    _texel = vec2(float((1.00000000E+00/TextureSize).x), float((1.00000000E+00/TextureSize).y));
    _TMP2._tex_coord_1 = vec2(float((TexCoord.xy + vec2(0.00000000E+00, float(_texel.y))).x), float((TexCoord.xy + vec2(0.00000000E+00, float(_texel.y))).y));
    _TMP2._tex_coord_2 = vec2(float((TexCoord.xy + vec2(0.00000000E+00, float(-_texel.y))).x), float((TexCoord.xy + vec2(0.00000000E+00, float(-_texel.y))).y));
    _TMP2._upper_bound = vec2(float((vec2(float(_texel.x), float(_texel.y))*(OutputSize - 2.00000000E+00)).x), float((vec2(float(_texel.x), float(_texel.y))*(OutputSize - 2.00000000E+00)).y));
    _oBlurCoords1._tex_coord_1 = _TMP2._tex_coord_1;
    _oBlurCoords1._tex_coord_2 = _TMP2._tex_coord_2;
    _oBlurCoords1._lower_bound = vec2( 0.00000000E+00, 0.00000000E+00);
    _oBlurCoords1._upper_bound = _TMP2._upper_bound;
    gl_Position = _r0004;
    TEX0.xy = TexCoord.xy;
    TEX1.xy = _TMP2._tex_coord_1;
    TEX2.xy = _TMP2._tex_coord_2;
    TEX3.xy = vec2( 0.00000000E+00, 0.00000000E+00);
    TEX4.xy = _TMP2._upper_bound;
} 
#elif defined(FRAGMENT)
#ifdef GL_ES
precision mediump float;
#endif
varying     vec2 _upper_bound;
varying     vec2 _lower_bound;
varying     vec2 _tex_coord_2;
varying     vec2 _tex_coord_1;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
float _placeholder31;
};
struct pass_1 {
float _placeholder35;
};
struct blur_coords {
    vec2 _tex_coord_1;
    vec2 _tex_coord_2;
    vec2 _lower_bound;
    vec2 _upper_bound;
};
vec4 _ret_0;
vec4 _TMP7;
vec4 _TMP6;
vec4 _TMP5;
vec4 _TMP4;
vec2 _TMP8;
vec2 _TMP10;
vec2 _TMP9;
float _TMP1;
float _TMP3;
vec4 _TMP0;
pass_1 _PASS11;
input_dummy _IN2;
float _a0017;
vec4 _adjacent_texel_10019;
vec4 _adjacent_texel_20019;
vec4 _adjacent_texel_30019;
vec4 _adjacent_texel_40019;
vec3 _LCD_color0019;
vec4 _COLOR0019;
vec3 _original_color0019;
vec2 _TMP20;
vec2 _TMP26;
vec2 _c0033;
vec2 _c0035;
vec2 _c0037;
vec2 _c0039;
varying vec4 TEX0;
varying vec4 TEX1;
varying vec4 TEX2;
varying vec4 TEX3;
varying vec4 TEX4;
 
uniform sampler2D Texture;
uniform sampler2D Pass1Texture;
uniform int FrameDirection;
uniform int FrameCount;
#ifdef GL_ES
uniform mediump vec2 OutputSize;
uniform mediump vec2 TextureSize;
uniform mediump vec2 InputSize;
#else
uniform vec2 OutputSize;
uniform vec2 TextureSize;
uniform vec2 InputSize;
#endif
void main()
{
    vec4 _out_color;
    float _is_on_line;
    _TMP0 = texture2D(Texture, TEX0.xy);
    _out_color = vec4(float(_TMP0.x), float(_TMP0.y), float(_TMP0.z), float(_TMP0.w));
    _a0017 = _out_color.w - 5.00000000E-01;
    _TMP3 = abs(float(_a0017));
    _TMP1 = float(_TMP3);
    _is_on_line = float((_TMP1 < 9.96093750E-02));
    _COLOR0019 = _out_color;
    _TMP9 = min(vec2(float(TEX4.x), float(TEX4.y)), vec2(float(TEX1.x), float(TEX1.y)));
    _TMP8 = vec2(float(_TMP9.x), float(_TMP9.y));
    _TMP10 = max(vec2(float(TEX3.x), float(TEX3.y)), vec2(float(_TMP8.x), float(_TMP8.y)));
    _TMP20 = vec2(float(_TMP10.x), float(_TMP10.y));
    _TMP9 = min(vec2(float(TEX4.x), float(TEX4.y)), vec2(float(TEX2.x), float(TEX2.y)));
    _TMP8 = vec2(float(_TMP9.x), float(_TMP9.y));
    _TMP10 = max(vec2(float(TEX3.x), float(TEX3.y)), vec2(float(_TMP8.x), float(_TMP8.y)));
    _TMP26 = vec2(float(_TMP10.x), float(_TMP10.y));
    _c0033 = vec2(float(_TMP20.x), float(_TMP20.y));
    _TMP4 = texture2D(Texture, _c0033);
    _adjacent_texel_10019 = vec4(float(_TMP4.x), float(_TMP4.y), float(_TMP4.z), float(_TMP4.w));
    _c0035 = vec2(float(_TMP26.x), float(_TMP26.y));
    _TMP5 = texture2D(Texture, _c0035);
    _adjacent_texel_20019 = vec4(float(_TMP5.x), float(_TMP5.y), float(_TMP5.z), float(_TMP5.w));
    _c0037 = vec2(float(_TMP20.x), float(_TMP20.y));
    _TMP6 = texture2D(Pass1Texture, _c0037);
    _adjacent_texel_30019 = vec4(float(_TMP6.x), float(_TMP6.y), float(_TMP6.z), float(_TMP6.w));
    _c0039 = vec2(float(_TMP26.x), float(_TMP26.y));
    _TMP7 = texture2D(Pass1Texture, _c0039);
    _adjacent_texel_40019 = vec4(float(_TMP7.x), float(_TMP7.y), float(_TMP7.z), float(_TMP7.w));
    _LCD_color0019 = ((_out_color.xyz - _adjacent_texel_10019.xyz) + (_out_color.xyz - _adjacent_texel_20019.xyz))*2.00195312E-01;
    _original_color0019 = ((_out_color.xyz - _adjacent_texel_30019.xyz) + (_out_color.xyz - _adjacent_texel_40019.xyz))*2.00195312E-01;
    _COLOR0019.xyz = _out_color.xyz - (_original_color0019 + _LCD_color0019);
    _out_color = _COLOR0019*_is_on_line + _out_color*float(!bool(_is_on_line));
    _ret_0 = vec4(float(_out_color.x), float(_out_color.y), float(_out_color.z), float(_out_color.w));
    gl_FragColor = _ret_0;
    return;
} 
#endif
