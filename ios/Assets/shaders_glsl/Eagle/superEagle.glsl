// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)
varying     vec4 _t7;
varying     vec4 _t6;
varying     vec4 _t5;
varying     vec4 _t4;
varying     vec4 _t3;
varying     vec4 _t2;
varying     vec4 _t1;
varying     vec2 _texCoord1;
varying     vec4 _position1;
varying     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct out_vertex {
    vec4 _position1;
    vec2 _texCoord1;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
    vec4 _t5;
    vec4 _t6;
    vec4 _t7;
};
out_vertex _ret_0;
uniform mat4 MVPMatrix;
input_dummy _IN1;
vec4 _r0005;
attribute vec4 VertexCoord;
attribute vec4 TexCoord;
varying vec4 TEX0;
varying vec4 TEX1;
varying vec4 TEX2;
varying vec4 TEX3;
varying vec4 TEX4;
varying vec4 TEX5;
varying vec4 TEX6;
varying vec4 TEX7;
 

         mat4 transpose_(mat4 matrix)
         {
            mat4 ret;
            for (int i = 0; i < 4; i++)
               for (int j = 0; j < 4; j++)
                  ret[i][j] = matrix[j][i];

            return ret;
         }
         
uniform int FrameDirection;
uniform int FrameCount;
#ifdef GL_ES
uniform mediump vec2 OutputSize;
uniform mediump vec2 TextureSize;
uniform mediump vec2 InputSize;
#else
uniform vec2 OutputSize;
uniform vec2 TextureSize;
uniform vec2 InputSize;
#endif
void main()
{
    mat4 MVPMatrix_ = transpose_(MVPMatrix);
    out_vertex _OUT;
    vec2 _ps;
    _r0005.x = dot(MVPMatrix_[0], VertexCoord);
    _r0005.y = dot(MVPMatrix_[1], VertexCoord);
    _r0005.z = dot(MVPMatrix_[2], VertexCoord);
    _r0005.w = dot(MVPMatrix_[3], VertexCoord);
    _ps = vec2(1.00000000E+00/TextureSize.x, 1.00000000E+00/TextureSize.y);
    _OUT._t1.xy = TexCoord.xy + vec2(float(float(-_ps.x)), float(float(-_ps.y)));
    _OUT._t1.zw = TexCoord.xy + vec2(float(float(-_ps.x)), 0.00000000E+00);
    _OUT._t2.xy = TexCoord.xy + vec2(float(float(+_ps.x)), float(float(-_ps.y)));
    _OUT._t2.zw = TexCoord.xy + vec2(float(float((+_ps.x + _ps.x))), float(float(-_ps.y)));
    _OUT._t3.xy = TexCoord.xy + vec2(float(float(-_ps.x)), 0.00000000E+00);
    _OUT._t3.zw = TexCoord.xy + vec2(float(float(+_ps.x)), 0.00000000E+00);
    _OUT._t4.xy = TexCoord.xy + vec2(float(float((+_ps.x + _ps.x))), 0.00000000E+00);
    _OUT._t4.zw = TexCoord.xy + vec2(float(float(-_ps.x)), float(float(+_ps.y)));
    _OUT._t5.xy = TexCoord.xy + vec2(0.00000000E+00, float(float(+_ps.y)));
    _OUT._t5.zw = TexCoord.xy + vec2(float(float(+_ps.x)), float(float(+_ps.y)));
    _OUT._t6.xy = TexCoord.xy + vec2(float(float((+_ps.x + _ps.x))), float(float(+_ps.y)));
    _OUT._t6.zw = TexCoord.xy + vec2(float(float(-_ps.x)), float(float((+_ps.y + _ps.y))));
    _OUT._t7.xy = TexCoord.xy + vec2(0.00000000E+00, float(float((+_ps.y + _ps.y))));
    _OUT._t7.zw = TexCoord.xy + vec2(float(float(+_ps.x)), float(float((+_ps.y + _ps.y))));
    _ret_0._position1 = _r0005;
    _ret_0._texCoord1 = TexCoord.xy;
    _ret_0._t1 = _OUT._t1;
    _ret_0._t2 = _OUT._t2;
    _ret_0._t3 = _OUT._t3;
    _ret_0._t4 = _OUT._t4;
    _ret_0._t5 = _OUT._t5;
    _ret_0._t6 = _OUT._t6;
    _ret_0._t7 = _OUT._t7;
    gl_Position = _r0005;
    TEX0.xy = TexCoord.xy;
    TEX1 = _OUT._t1;
    TEX2 = _OUT._t2;
    TEX3 = _OUT._t3;
    TEX4 = _OUT._t4;
    TEX5 = _OUT._t5;
    TEX6 = _OUT._t6;
    TEX7 = _OUT._t7;
    return;
    TEX0.xy = _ret_0._texCoord1;
    TEX1 = _ret_0._t1;
    TEX2 = _ret_0._t2;
    TEX3 = _ret_0._t3;
    TEX4 = _ret_0._t4;
    TEX5 = _ret_0._t5;
    TEX6 = _ret_0._t6;
    TEX7 = _ret_0._t7;
} 
#elif defined(FRAGMENT)
#ifdef GL_ES
precision mediump float;
#endif
varying     vec4 _t7;
varying     vec4 _t6;
varying     vec4 _t5;
varying     vec4 _t4;
varying     vec4 _t3;
varying     vec4 _t2;
varying     vec4 _t1;
varying     vec2 _texCoord;
varying     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct out_vertex {
    vec2 _texCoord;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
    vec4 _t5;
    vec4 _t6;
    vec4 _t7;
};
vec4 _ret_0;
vec3 _TMP28;
vec3 _TMP30;
vec3 _TMP29;
float _TMP31;
float _TMP32;
vec4 _TMP14;
vec4 _TMP13;
vec4 _TMP11;
vec4 _TMP10;
vec4 _TMP9;
vec4 _TMP8;
vec4 _TMP7;
vec4 _TMP6;
vec4 _TMP5;
vec4 _TMP4;
vec4 _TMP2;
vec4 _TMP1;
uniform sampler2D Texture;
input_dummy _IN1;
vec2 _x0039;
int _x0137;
int _y0137;
int _r0137;
int _x0139;
int _y0139;
int _r0139;
int _x0141;
int _y0141;
int _r0141;
int _x0143;
int _y0143;
int _r0143;
varying vec4 TEX0;
varying vec4 TEX1;
varying vec4 TEX2;
varying vec4 TEX3;
varying vec4 TEX4;
varying vec4 TEX5;
varying vec4 TEX6;
varying vec4 TEX7;
 
uniform int FrameDirection;
uniform int FrameCount;
#ifdef GL_ES
uniform mediump vec2 OutputSize;
uniform mediump vec2 TextureSize;
uniform mediump vec2 InputSize;
#else
uniform vec2 OutputSize;
uniform vec2 TextureSize;
uniform vec2 InputSize;
#endif
void main()
{
    vec2 _fp;
    vec3 _C1;
    vec3 _C2;
    vec3 _C3;
    vec3 _C4;
    vec3 _C5;
    vec3 _D4;
    vec3 _C6;
    vec3 _C7;
    vec3 _C8;
    vec3 _D5;
    vec3 _D1;
    vec3 _D2;
    vec3 _p00;
    vec3 _p10;
    vec3 _p01;
    vec3 _p11;
    float _c1;
    float _c2;
    float _c3;
    float _c4;
    float _c5;
    float _c6;
    float _c7;
    float _c8;
    float _d1;
    float _d2;
    float _d4;
    float _d5;
    int _r1;
    _x0039 = TEX0.xy*TextureSize;
    _fp = fract(_x0039);
    _TMP1 = texture2D(Texture, TEX1.zw);
    _C1 = vec3(float(_TMP1.x), float(_TMP1.y), float(_TMP1.z));
    _TMP2 = texture2D(Texture, TEX2.xy);
    _C2 = vec3(float(_TMP2.x), float(_TMP2.y), float(_TMP2.z));
    _TMP4 = texture2D(Texture, TEX3.xy);
    _C3 = vec3(float(_TMP4.x), float(_TMP4.y), float(_TMP4.z));
    _TMP5 = texture2D(Texture, TEX0.xy);
    _C4 = vec3(float(_TMP5.x), float(_TMP5.y), float(_TMP5.z));
    _TMP6 = texture2D(Texture, TEX3.zw);
    _C5 = vec3(float(_TMP6.x), float(_TMP6.y), float(_TMP6.z));
    _TMP7 = texture2D(Texture, TEX4.xy);
    _D4 = vec3(float(_TMP7.x), float(_TMP7.y), float(_TMP7.z));
    _TMP8 = texture2D(Texture, TEX4.zw);
    _C6 = vec3(float(_TMP8.x), float(_TMP8.y), float(_TMP8.z));
    _TMP9 = texture2D(Texture, TEX5.xy);
    _C7 = vec3(float(_TMP9.x), float(_TMP9.y), float(_TMP9.z));
    _TMP10 = texture2D(Texture, TEX5.zw);
    _C8 = vec3(float(_TMP10.x), float(_TMP10.y), float(_TMP10.z));
    _TMP11 = texture2D(Texture, TEX6.xy);
    _D5 = vec3(float(_TMP11.x), float(_TMP11.y), float(_TMP11.z));
    _TMP13 = texture2D(Texture, TEX7.xy);
    _D1 = vec3(float(_TMP13.x), float(_TMP13.y), float(_TMP13.z));
    _TMP14 = texture2D(Texture, TEX7.zw);
    _D2 = vec3(float(_TMP14.x), float(_TMP14.y), float(_TMP14.z));
    _TMP32 = dot(vec3(float(_C1.x), float(_C1.y), float(_C1.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP31 = float(_TMP32);
    _c1 = float(_TMP31);
    _TMP32 = dot(vec3(float(_C2.x), float(_C2.y), float(_C2.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP31 = float(_TMP32);
    _c2 = float(_TMP31);
    _TMP32 = dot(vec3(float(_C3.x), float(_C3.y), float(_C3.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP31 = float(_TMP32);
    _c3 = float(_TMP31);
    _TMP32 = dot(vec3(float(_C4.x), float(_C4.y), float(_C4.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP31 = float(_TMP32);
    _c4 = float(_TMP31);
    _TMP32 = dot(vec3(float(_C5.x), float(_C5.y), float(_C5.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP31 = float(_TMP32);
    _c5 = float(_TMP31);
    _TMP32 = dot(vec3(float(_C6.x), float(_C6.y), float(_C6.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP31 = float(_TMP32);
    _c6 = float(_TMP31);
    _TMP32 = dot(vec3(float(_C7.x), float(_C7.y), float(_C7.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP31 = float(_TMP32);
    _c7 = float(_TMP31);
    _TMP32 = dot(vec3(float(_C8.x), float(_C8.y), float(_C8.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP31 = float(_TMP32);
    _c8 = float(_TMP31);
    _TMP32 = dot(vec3(float(_D1.x), float(_D1.y), float(_D1.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP31 = float(_TMP32);
    _d1 = float(_TMP31);
    _TMP32 = dot(vec3(float(_D2.x), float(_D2.y), float(_D2.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP31 = float(_TMP32);
    _d2 = float(_TMP31);
    _TMP32 = dot(vec3(float(_D4.x), float(_D4.y), float(_D4.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP31 = float(_TMP32);
    _d4 = float(_TMP31);
    _TMP32 = dot(vec3(float(_D5.x), float(_D5.y), float(_D5.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP31 = float(_TMP32);
    _d5 = float(_TMP31);
    if (_c4 != _c8) { 
        if (_c7 == _c5) { 
            _p10 = _C7;
            _p01 = _C7;
            if (_c6 == _c7 || _c5 == _c2) { 
                _p00 = 2.50000000E-01*(3.00000000E+00*_C7 + _C4);
            } else {
                _p00 = 5.00000000E-01*(_C4 + _C5);
            } 
            if (_c5 == _d4 || _c7 == _d1) { 
                _p11 = 2.50000000E-01*(3.00000000E+00*_C7 + _C8);
            } else {
                _p11 = 5.00000000E-01*(_C7 + _C8);
            } 
        } else {
            _p11 = 1.25000000E-01*(6.00000000E+00*_C8 + _C7 + _C5);
            _p00 = 1.25000000E-01*(6.00000000E+00*_C4 + _C7 + _C5);
            _p10 = 1.25000000E-01*(6.00000000E+00*_C7 + _C4 + _C8);
            _p01 = 1.25000000E-01*(6.00000000E+00*_C5 + _C4 + _C8);
        } 
    } else {
        if (_c7 != _c5) { 
            _p00 = _C4;
            _p11 = _C4;
            if (_c1 == _c4 || _c8 == _d5) { 
                _p01 = 2.50000000E-01*(3.00000000E+00*_C4 + _C5);
            } else {
                _p01 = 5.00000000E-01*(_C4 + _C5);
            } 
            if (_c8 == _d2 || _c3 == _c4) { 
                _p10 = 2.50000000E-01*(3.00000000E+00*_C4 + _C7);
            } else {
                _p10 = 5.00000000E-01*(_C7 + _C8);
            } 
        } else {
            _x0137 = 0;
            _y0137 = 0;
            _r0137 = 0;
            if (_c5 == _c6) { 
                _x0137 = 1;
            } else {
                if (_c4 == _c6) { 
                    _y0137 = 1;
                } 
            } 
            if (_c5 == _d1) { 
                _x0137 = _x0137 + 1;
            } else {
                if (_c4 == _d1) { 
                    _y0137 = _y0137 + 1;
                } 
            } 
            if (_x0137 <= 1) { 
                _r0137 = 1;
            } 
            if (_y0137 <= 1) { 
                _r0137 = _r0137 - 1;
            } 
            _x0139 = 0;
            _y0139 = 0;
            _r0139 = 0;
            if (_c5 == _c3) { 
                _x0139 = 1;
            } else {
                if (_c4 == _c3) { 
                    _y0139 = 1;
                } 
            } 
            if (_c5 == _c1) { 
                _x0139 = _x0139 + 1;
            } else {
                if (_c4 == _c1) { 
                    _y0139 = _y0139 + 1;
                } 
            } 
            if (_x0139 <= 1) { 
                _r0139 = 1;
            } 
            if (_y0139 <= 1) { 
                _r0139 = _r0139 - 1;
            } 
            _r1 = _r0137 + _r0139;
            _x0141 = 0;
            _y0141 = 0;
            _r0141 = 0;
            if (_c5 == _d2) { 
                _x0141 = 1;
            } else {
                if (_c4 == _d2) { 
                    _y0141 = 1;
                } 
            } 
            if (_c5 == _d5) { 
                _x0141 = _x0141 + 1;
            } else {
                if (_c4 == _d5) { 
                    _y0141 = _y0141 + 1;
                } 
            } 
            if (_x0141 <= 1) { 
                _r0141 = 1;
            } 
            if (_y0141 <= 1) { 
                _r0141 = _r0141 - 1;
            } 
            _r1 = _r1 + _r0141;
            _x0143 = 0;
            _y0143 = 0;
            _r0143 = 0;
            if (_c5 == _c2) { 
                _x0143 = 1;
            } else {
                if (_c4 == _c2) { 
                    _y0143 = 1;
                } 
            } 
            if (_c5 == _d4) { 
                _x0143 = _x0143 + 1;
            } else {
                if (_c4 == _d4) { 
                    _y0143 = _y0143 + 1;
                } 
            } 
            if (_x0143 <= 1) { 
                _r0143 = 1;
            } 
            if (_y0143 <= 1) { 
                _r0143 = _r0143 - 1;
            } 
            _r1 = _r1 + _r0143;
            if (_r1 > 0) { 
                _p10 = _C7;
                _p01 = _C7;
                _p11 = 5.00000000E-01*(_C4 + _C5);
                _p00 = _p11;
            } else {
                if (_r1 < 0) { 
                    _p00 = _C4;
                    _p11 = _C4;
                    _p10 = 5.00000000E-01*(_C4 + _C5);
                    _p01 = _p10;
                } else {
                    _p00 = _C4;
                    _p11 = _C4;
                    _p10 = _C7;
                    _p01 = _C7;
                } 
            } 
        } 
    } 
    if (_fp.x < 5.00000000E-01) { 
        if (_fp.y < 5.00000000E-01) { 
            _TMP29 = _p00;
        } else {
            _TMP29 = _p10;
        } 
        _TMP28 = _TMP29;
    } else {
        if (_fp.y < 5.00000000E-01) { 
            _TMP30 = _p01;
        } else {
            _TMP30 = _p11;
        } 
        _TMP28 = _TMP30;
    } 
    _ret_0 = vec4(float(_TMP28.x), float(_TMP28.y), float(_TMP28.z), 1.00000000E+00);
    gl_FragColor = _ret_0;
    return;
} 
#endif
